/* libnm-utils.vapi generated by lt-vapigen, do not modify. */

[CCode (cprefix = "NM", gir_namespace = "NetworkManager", gir_version = "1.0", lower_case_cprefix = "nm__")]
namespace NM {
	namespace DBus {
		namespace VPN {
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_ALREADY_STARTED")]
			public const string ALREADY_STARTED;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_ALREADY_STOPPED")]
			public const string ALREADY_STOPPED;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_BAD_ARGUMENTS")]
			public const string BAD_ARGUMENTS;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_SIGNAL_CONNECT_FAILED")]
			public const string SIGNAL_CONNECT_FAILED;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_SIGNAL_IP4_CONFIG")]
			public const string SIGNAL_IP4_CONFIG;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_SIGNAL_IP_CONFIG_BAD")]
			public const string SIGNAL_IP_CONFIG_BAD;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_SIGNAL_LAUNCH_FAILED")]
			public const string SIGNAL_LAUNCH_FAILED;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_SIGNAL_LOGIN_BANNER")]
			public const string SIGNAL_LOGIN_BANNER;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_SIGNAL_LOGIN_FAILED")]
			public const string SIGNAL_LOGIN_FAILED;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_SIGNAL_STATE_CHANGE")]
			public const string SIGNAL_STATE_CHANGE;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_SIGNAL_VPN_CONFIG_BAD")]
			public const string SIGNAL_VPN_CONFIG_BAD;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_STARTING_IN_PROGRESS")]
			public const string STARTING_IN_PROGRESS;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_STOPPING_IN_PROGRESS")]
			public const string STOPPING_IN_PROGRESS;
			[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_VPN_WRONG_STATE")]
			public const string WRONG_STATE;
		}
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_IFACE_SETTINGS")]
		public const string IFACE_SETTINGS;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_IFACE_SETTINGS_CONNECTION")]
		public const string IFACE_SETTINGS_CONNECTION;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_IFACE_SETTINGS_CONNECTION_SECRETS")]
		public const string IFACE_SETTINGS_CONNECTION_SECRETS;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_INTERFACE")]
		public const string INTERFACE;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_INTERFACE_VPN")]
		public const string INTERFACE_VPN;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_INTERFACE_VPN_CONNECTION")]
		public const string INTERFACE_VPN_CONNECTION;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_INVALID_VPN_CONNECTION")]
		public const string INVALID_VPN_CONNECTION;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_NO_ACTIVE_VPN_CONNECTION")]
		public const string NO_ACTIVE_VPN_CONNECTION;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_NO_VPN_CONNECTIONS")]
		public const string NO_VPN_CONNECTIONS;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_PATH")]
		public const string PATH;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_PATH_AGENT_MANAGER")]
		public const string PATH_AGENT_MANAGER;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_PATH_SECRET_AGENT")]
		public const string PATH_SECRET_AGENT;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_PATH_SETTINGS")]
		public const string PATH_SETTINGS;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_PATH_SETTINGS_CONNECTION")]
		public const string PATH_SETTINGS_CONNECTION;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_PATH_VPN")]
		public const string PATH_VPN;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_DBUS_PATH_VPN_CONNECTION")]
		public const string PATH_VPN_CONNECTION;
		[CCode (cheader_filename = "NetworkManager.h", cname = "NM_DBUS_SERVICE")]
		public const string SERVICE;
	}
	namespace SettingIp4 {
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_ADDRESSES")]
		public const string CONFIG_ADDRESSES;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_DHCP_CLIENT_ID")]
		public const string CONFIG_DHCP_CLIENT_ID;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_DHCP_HOSTNAME")]
		public const string CONFIG_DHCP_HOSTNAME;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_DHCP_SEND_HOSTNAME")]
		public const string CONFIG_DHCP_SEND_HOSTNAME;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_DNS")]
		public const string CONFIG_DNS;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_DNS_SEARCH")]
		public const string CONFIG_DNS_SEARCH;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_IGNORE_AUTO_DNS")]
		public const string CONFIG_IGNORE_AUTO_DNS;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_IGNORE_AUTO_ROUTES")]
		public const string CONFIG_IGNORE_AUTO_ROUTES;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_MAY_FAIL")]
		public const string CONFIG_MAY_FAIL;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_METHOD")]
		public const string CONFIG_METHOD;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_METHOD_AUTO")]
		public const string CONFIG_METHOD_AUTO;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_METHOD_DISABLED")]
		public const string CONFIG_METHOD_DISABLED;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_METHOD_LINK_LOCAL")]
		public const string CONFIG_METHOD_LINK_LOCAL;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_METHOD_MANUAL")]
		public const string CONFIG_METHOD_MANUAL;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_METHOD_SHARED")]
		public const string CONFIG_METHOD_SHARED;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_NEVER_DEFAULT")]
		public const string CONFIG_NEVER_DEFAULT;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_ROUTES")]
		public const string CONFIG_ROUTES;
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "NM_SETTING_IP4_CONFIG_SETTING_NAME")]
		public const string CONFIG_SETTING_NAME;
	}
	namespace SettingIp6 {
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_ADDRESSES")]
		public const string CONFIG_ADDRESSES;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_DNS")]
		public const string CONFIG_DNS;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_DNS_SEARCH")]
		public const string CONFIG_DNS_SEARCH;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_IGNORE_AUTO_DNS")]
		public const string CONFIG_IGNORE_AUTO_DNS;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_IGNORE_AUTO_ROUTES")]
		public const string CONFIG_IGNORE_AUTO_ROUTES;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_IP6_PRIVACY")]
		public const string CONFIG_IP6_PRIVACY;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_MAY_FAIL")]
		public const string CONFIG_MAY_FAIL;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_METHOD")]
		public const string CONFIG_METHOD;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_METHOD_AUTO")]
		public const string CONFIG_METHOD_AUTO;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_METHOD_DHCP")]
		public const string CONFIG_METHOD_DHCP;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_METHOD_IGNORE")]
		public const string CONFIG_METHOD_IGNORE;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_METHOD_LINK_LOCAL")]
		public const string CONFIG_METHOD_LINK_LOCAL;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_METHOD_MANUAL")]
		public const string CONFIG_METHOD_MANUAL;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_METHOD_SHARED")]
		public const string CONFIG_METHOD_SHARED;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_NEVER_DEFAULT")]
		public const string CONFIG_NEVER_DEFAULT;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_ROUTES")]
		public const string CONFIG_ROUTES;
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "NM_SETTING_IP6_CONFIG_SETTING_NAME")]
		public const string CONFIG_SETTING_NAME;
	}
	namespace SettingOLPC {
		[CCode (cheader_filename = "nm-setting-olpc-mesh.h", cname = "NM_SETTING_OLPC_MESH_CHANNEL")]
		public const string MESH_CHANNEL;
		[CCode (cheader_filename = "nm-setting-olpc-mesh.h", cname = "NM_SETTING_OLPC_MESH_DHCP_ANYCAST_ADDRESS")]
		public const string MESH_DHCP_ANYCAST_ADDRESS;
		[CCode (cheader_filename = "nm-setting-olpc-mesh.h", cname = "NM_SETTING_OLPC_MESH_SETTING_NAME")]
		public const string MESH_SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-olpc-mesh.h", cname = "NM_SETTING_OLPC_MESH_SSID")]
		public const string MESH_SSID;
	}
	namespace SettingVpn {
		[CCode (cheader_filename = "nm-setting-vpn.h", cname = "NM_SETTING_VPN_DATA")]
		public const string DATA;
		[CCode (cheader_filename = "nm-setting-vpn.h", cname = "NM_SETTING_VPN_SECRETS")]
		public const string SECRETS;
		[CCode (cheader_filename = "nm-setting-vpn.h", cname = "NM_SETTING_VPN_SERVICE_TYPE")]
		public const string SERVICE_TYPE;
		[CCode (cheader_filename = "nm-setting-vpn.h", cname = "NM_SETTING_VPN_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-vpn.h", cname = "NM_SETTING_VPN_USER_NAME")]
		public const string USER_NAME;
	}
	namespace Utils {
		[CCode (cheader_filename = "nm-utils.h", cprefix = "NMU_SEC_")]
		[GIR (name = "UtilsSecurityType")]
		public enum SecurityType {
			INVALID,
			NONE,
			STATIC_WEP,
			LEAP,
			DYNAMIC_WEP,
			WPA_PSK,
			WPA_ENTERPRISE,
			WPA2_PSK,
			WPA2_ENTERPRISE
		}
		[CCode (cheader_filename = "nm-utils.h", cname = "NM_UTILS_HWADDR_LEN_MAX")]
		public const int HWADDR_LEN_MAX;
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_deinit")]
		public static void deinit ();
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_escape_ssid")]
		public static unowned string escape_ssid (uint8 ssid, uint32 len);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_gvalue_hash_dup")]
		public static GLib.HashTable<weak string,weak GLib.Value?> gvalue_hash_dup (GLib.HashTable<void*,void*> hash);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_hwaddr_atoba")]
		public static GLib.ByteArray hwaddr_atoba (string asc, int type);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_hwaddr_aton")]
		public static uint8 hwaddr_aton (string asc, int type, void* buffer);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_hwaddr_len")]
		public static int hwaddr_len (int type);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_hwaddr_ntoa")]
		public static string hwaddr_ntoa (void* addr, int type);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_hwaddr_type")]
		public static int hwaddr_type (int len);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_init")]
		public static bool init () throws GLib.Error;
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_ip4_addresses_from_gvalue")]
		public static GLib.SList<NM.IP4Address> ip4_addresses_from_gvalue (GLib.Value value);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_ip4_addresses_to_gvalue")]
		public static void ip4_addresses_to_gvalue (GLib.SList<NM.IP4Address> list, GLib.Value value);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_ip4_get_default_prefix")]
		public static uint32 ip4_get_default_prefix (uint32 ip);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_ip4_netmask_to_prefix")]
		public static uint32 ip4_netmask_to_prefix (uint32 netmask);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_ip4_prefix_to_netmask")]
		public static uint32 ip4_prefix_to_netmask (uint32 prefix);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_ip4_routes_from_gvalue")]
		public static GLib.SList<NM.IP4Route> ip4_routes_from_gvalue (GLib.Value value);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_ip4_routes_to_gvalue")]
		public static void ip4_routes_to_gvalue (GLib.SList<NM.IP4Route> list, GLib.Value value);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_ip6_addresses_from_gvalue")]
		public static GLib.SList<NM.IP6Address> ip6_addresses_from_gvalue (GLib.Value value);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_ip6_addresses_to_gvalue")]
		public static void ip6_addresses_to_gvalue (GLib.SList<NM.IP6Address> list, GLib.Value value);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_ip6_routes_from_gvalue")]
		public static GLib.SList<NM.IP6Route> ip6_routes_from_gvalue (GLib.Value value);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_ip6_routes_to_gvalue")]
		public static void ip6_routes_to_gvalue (GLib.SList<NM.IP6Route> list, GLib.Value value);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_is_empty_ssid")]
		public static bool is_empty_ssid (uint8 ssid, int len);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_rsa_key_encrypt")]
		public static GLib.ByteArray rsa_key_encrypt (GLib.ByteArray data, string? in_password, out string out_password) throws GLib.Error;
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_same_ssid")]
		public static bool same_ssid (GLib.ByteArray ssid1, GLib.ByteArray ssid2, bool ignore_trailing_null);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_security_valid")]
		public static bool security_valid (NM.Utils.SecurityType type, NM.DeviceWifiCapabilities wifi_caps, bool have_ap, bool adhoc, NM.80211ApFlags ap_flags, NM.80211ApSecurityFlags ap_wpa, NM.80211ApSecurityFlags ap_rsn);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_ssid_to_utf8")]
		public static string ssid_to_utf8 (GLib.ByteArray ssid);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_uuid_generate")]
		public static string uuid_generate ();
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_uuid_generate_from_string")]
		public static string uuid_generate_from_string (string s);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_wifi_channel_to_freq")]
		public static uint32 wifi_channel_to_freq (uint32 channel, string band);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_wifi_find_next_channel")]
		public static uint32 wifi_find_next_channel (uint32 channel, int direction, string band);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_wifi_freq_to_channel")]
		public static uint32 wifi_freq_to_channel (uint32 freq);
		[CCode (cheader_filename = "nm-utils.h", cname = "nm_utils_wifi_is_channel_valid")]
		public static bool wifi_is_channel_valid (uint32 channel, string band);
	}
	namespace VPN {
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_DBUS_PLUGIN_INTERFACE")]
		public const string DBUS_PLUGIN_INTERFACE;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_DBUS_PLUGIN_PATH")]
		public const string DBUS_PLUGIN_PATH;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_CONFIG_BANNER")]
		public const string PLUGIN_CONFIG_BANNER;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_CONFIG_EXT_GATEWAY")]
		public const string PLUGIN_CONFIG_EXT_GATEWAY;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_CONFIG_HAS_IP4")]
		public const string PLUGIN_CONFIG_HAS_IP4;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_CONFIG_HAS_IP6")]
		public const string PLUGIN_CONFIG_HAS_IP6;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_CONFIG_MTU")]
		public const string PLUGIN_CONFIG_MTU;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_CONFIG_TUNDEV")]
		public const string PLUGIN_CONFIG_TUNDEV;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP4_CONFIG_ADDRESS")]
		public const string PLUGIN_IP4_CONFIG_ADDRESS;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP4_CONFIG_DNS")]
		public const string PLUGIN_IP4_CONFIG_DNS;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP4_CONFIG_DOMAIN")]
		public const string PLUGIN_IP4_CONFIG_DOMAIN;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP4_CONFIG_DOMAINS")]
		public const string PLUGIN_IP4_CONFIG_DOMAINS;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP4_CONFIG_INT_GATEWAY")]
		public const string PLUGIN_IP4_CONFIG_INT_GATEWAY;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP4_CONFIG_MSS")]
		public const string PLUGIN_IP4_CONFIG_MSS;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP4_CONFIG_NBNS")]
		public const string PLUGIN_IP4_CONFIG_NBNS;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP4_CONFIG_NEVER_DEFAULT")]
		public const string PLUGIN_IP4_CONFIG_NEVER_DEFAULT;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP4_CONFIG_PREFIX")]
		public const string PLUGIN_IP4_CONFIG_PREFIX;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP4_CONFIG_PTP")]
		public const string PLUGIN_IP4_CONFIG_PTP;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP4_CONFIG_ROUTES")]
		public const string PLUGIN_IP4_CONFIG_ROUTES;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP6_CONFIG_ADDRESS")]
		public const string PLUGIN_IP6_CONFIG_ADDRESS;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP6_CONFIG_DNS")]
		public const string PLUGIN_IP6_CONFIG_DNS;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP6_CONFIG_DOMAIN")]
		public const string PLUGIN_IP6_CONFIG_DOMAIN;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP6_CONFIG_DOMAINS")]
		public const string PLUGIN_IP6_CONFIG_DOMAINS;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP6_CONFIG_INT_GATEWAY")]
		public const string PLUGIN_IP6_CONFIG_INT_GATEWAY;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP6_CONFIG_MSS")]
		public const string PLUGIN_IP6_CONFIG_MSS;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP6_CONFIG_NEVER_DEFAULT")]
		public const string PLUGIN_IP6_CONFIG_NEVER_DEFAULT;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP6_CONFIG_PREFIX")]
		public const string PLUGIN_IP6_CONFIG_PREFIX;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP6_CONFIG_PTP")]
		public const string PLUGIN_IP6_CONFIG_PTP;
		[CCode (cheader_filename = "NetworkManagerVPN.h", cname = "NM_VPN_PLUGIN_IP6_CONFIG_ROUTES")]
		public const string PLUGIN_IP6_CONFIG_ROUTES;
	}
	[CCode (cheader_filename = "nm-connection.h", type_id = "nm_connection_get_type ()")]
	public class Connection : GLib.Object {
		[CCode (cname = "nm_connection_new", has_construct_function = false)]
		public Connection ();
		[CCode (cname = "nm_connection_add_setting")]
		public void add_setting (owned NM.Setting setting);
		[CCode (cname = "nm_connection_clear_secrets")]
		public void clear_secrets ();
		[CCode (cname = "nm_connection_clear_secrets_with_flags")]
		public void clear_secrets_with_flags (NM.SettingClearSecretsWithFlagsFn func);
		[CCode (cname = "nm_connection_compare")]
		public bool compare (NM.Connection b, NM.SettingCompareFlags flags);
		[CCode (cname = "nm_connection_create_setting")]
		public static NM.Setting create_setting (string name);
		[CCode (cname = "nm_connection_diff")]
		public bool diff (NM.Connection b, NM.SettingCompareFlags flags, GLib.HashTable<string,GLib.HashTable<void*,void*>> out_settings);
		[CCode (cname = "nm_connection_dump")]
		public void dump ();
		[CCode (cname = "nm_connection_duplicate")]
		public NM.Connection duplicate ();
		[CCode (cheader_filename = "nm-connection.h", cname = "nm_connection_error_quark")]
		public static GLib.Quark error_quark ();
		[CCode (cname = "nm_connection_for_each_setting_value")]
		public void for_each_setting_value (NM.SettingValueIterFn func);
		[CCode (cname = "nm_connection_new_from_hash", has_construct_function = false)]
		public Connection.from_hash (GLib.HashTable<string,GLib.HashTable<void*,void*>> hash) throws GLib.Error;
		[CCode (cname = "nm_connection_get_id")]
		public unowned string get_id ();
		[CCode (cname = "nm_connection_get_path")]
		public unowned string get_path ();
		[CCode (cname = "nm_connection_get_setting")]
		public unowned NM.Setting get_setting (GLib.Type setting_type);
		[CCode (cname = "nm_connection_get_setting_802_1x")]
		public unowned NM.Setting8021x get_setting_802_1x ();
		[CCode (cname = "nm_connection_get_setting_adsl")]
		public unowned NM.SettingAdsl get_setting_adsl ();
		[CCode (cname = "nm_connection_get_setting_bluetooth")]
		public unowned NM.SettingBluetooth get_setting_bluetooth ();
		[CCode (cname = "nm_connection_get_setting_bond")]
		public unowned NM.SettingBond get_setting_bond ();
		[CCode (cname = "nm_connection_get_setting_by_name")]
		public unowned NM.Setting get_setting_by_name (string name);
		[CCode (cname = "nm_connection_get_setting_cdma")]
		public unowned NM.SettingCdma get_setting_cdma ();
		[CCode (cname = "nm_connection_get_setting_connection")]
		public unowned NM.SettingConnection get_setting_connection ();
		[CCode (cname = "nm_connection_get_setting_gsm")]
		public unowned NM.SettingGsm get_setting_gsm ();
		[CCode (cname = "nm_connection_get_setting_infiniband")]
		public unowned NM.SettingInfiniband get_setting_infiniband ();
		[CCode (cname = "nm_connection_get_setting_ip4_config")]
		public unowned NM.SettingIP4Config get_setting_ip4_config ();
		[CCode (cname = "nm_connection_get_setting_ip6_config")]
		public unowned NM.SettingIP6Config get_setting_ip6_config ();
		[CCode (cname = "nm_connection_get_setting_olpc_mesh")]
		public unowned NM.SettingOlpcMesh get_setting_olpc_mesh ();
		[CCode (cname = "nm_connection_get_setting_ppp")]
		public unowned NM.SettingPPP get_setting_ppp ();
		[CCode (cname = "nm_connection_get_setting_pppoe")]
		public unowned NM.SettingPPPOE get_setting_pppoe ();
		[CCode (cname = "nm_connection_get_setting_serial")]
		public unowned NM.SettingSerial get_setting_serial ();
		[CCode (cname = "nm_connection_get_setting_vlan")]
		public unowned NM.SettingVlan get_setting_vlan ();
		[CCode (cname = "nm_connection_get_setting_vpn")]
		public unowned NM.SettingVPN get_setting_vpn ();
		[CCode (cname = "nm_connection_get_setting_wimax")]
		public unowned NM.SettingWimax get_setting_wimax ();
		[CCode (cname = "nm_connection_get_setting_wired")]
		public unowned NM.SettingWired get_setting_wired ();
		[CCode (cname = "nm_connection_get_setting_wireless")]
		public unowned NM.SettingWireless get_setting_wireless ();
		[CCode (cname = "nm_connection_get_setting_wireless_security")]
		public unowned NM.SettingWirelessSecurity get_setting_wireless_security ();
		[CCode (cname = "nm_connection_get_uuid")]
		public unowned string get_uuid ();
		[CCode (cname = "nm_connection_get_virtual_iface_name")]
		public unowned string get_virtual_iface_name ();
		[CCode (cname = "nm_connection_is_type")]
		public bool is_type (string type);
		[CCode (cname = "nm_connection_lookup_setting_type")]
		public static GLib.Type lookup_setting_type (string name);
		[CCode (cname = "nm_connection_lookup_setting_type_by_quark")]
		public static GLib.Type lookup_setting_type_by_quark (GLib.Quark error_quark);
		[CCode (cname = "nm_connection_need_secrets")]
		public unowned string need_secrets (out GLib.GenericArray<string> hints);
		[CCode (cname = "nm_connection_remove_setting")]
		public void remove_setting (GLib.Type setting_type);
		[CCode (cname = "nm_connection_replace_settings")]
		public bool replace_settings (GLib.HashTable<string,GLib.HashTable<void*,void*>> new_settings) throws GLib.Error;
		[CCode (cname = "nm_connection_set_path")]
		public void set_path (string path);
		[CCode (cname = "nm_connection_to_hash")]
		public GLib.HashTable<string,GLib.HashTable<void*,void*>> to_hash (NM.SettingHashFlags flags);
		[CCode (cname = "nm_connection_update_secrets")]
		public bool update_secrets (string setting_name, GLib.HashTable<string,GLib.Value?> secrets) throws GLib.Error;
		[CCode (cname = "nm_connection_verify")]
		public bool verify () throws GLib.Error;
		[NoAccessorMethod]
		public string path { owned get; set construct; }
		public signal void secrets_cleared ();
		public virtual signal void secrets_updated (string setting);
	}
	[CCode (cheader_filename = "nm-setting-ip4-config.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "nm_ip4_address_get_type ()")]
	[Compact]
	public class IP4Address {
		[CCode (cname = "nm_ip4_address_new", has_construct_function = false)]
		public IP4Address ();
		[CCode (cname = "nm_ip4_address_compare")]
		public bool compare (NM.IP4Address other);
		[CCode (cname = "nm_ip4_address_dup")]
		public NM.IP4Address dup ();
		[CCode (cname = "nm_ip4_address_get_address")]
		public uint32 get_address ();
		[CCode (cname = "nm_ip4_address_get_gateway")]
		public uint32 get_gateway ();
		[CCode (cname = "nm_ip4_address_get_prefix")]
		public uint32 get_prefix ();
		[CCode (cname = "nm_ip4_address_ref")]
		public void @ref ();
		[CCode (cname = "nm_ip4_address_set_address")]
		public void set_address (uint32 addr);
		[CCode (cname = "nm_ip4_address_set_gateway")]
		public void set_gateway (uint32 gateway);
		[CCode (cname = "nm_ip4_address_set_prefix")]
		public void set_prefix (uint32 prefix);
		[CCode (cname = "nm_ip4_address_unref")]
		public void unref ();
	}
	[CCode (cheader_filename = "nm-setting-ip4-config.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "nm_ip4_route_get_type ()")]
	[Compact]
	public class IP4Route {
		[CCode (cname = "nm_ip4_route_new", has_construct_function = false)]
		public IP4Route ();
		[CCode (cname = "nm_ip4_route_compare")]
		public bool compare (NM.IP4Route other);
		[CCode (cname = "nm_ip4_route_dup")]
		public NM.IP4Route dup ();
		[CCode (cname = "nm_ip4_route_get_dest")]
		public uint32 get_dest ();
		[CCode (cname = "nm_ip4_route_get_metric")]
		public uint32 get_metric ();
		[CCode (cname = "nm_ip4_route_get_next_hop")]
		public uint32 get_next_hop ();
		[CCode (cname = "nm_ip4_route_get_prefix")]
		public uint32 get_prefix ();
		[CCode (cname = "nm_ip4_route_ref")]
		public void @ref ();
		[CCode (cname = "nm_ip4_route_set_dest")]
		public void set_dest (uint32 dest);
		[CCode (cname = "nm_ip4_route_set_metric")]
		public void set_metric (uint32 metric);
		[CCode (cname = "nm_ip4_route_set_next_hop")]
		public void set_next_hop (uint32 next_hop);
		[CCode (cname = "nm_ip4_route_set_prefix")]
		public void set_prefix (uint32 prefix);
		[CCode (cname = "nm_ip4_route_unref")]
		public void unref ();
	}
	[CCode (cheader_filename = "nm-setting-ip6-config.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "nm_ip6_address_get_type ()")]
	[Compact]
	public class IP6Address {
		[CCode (cname = "nm_ip6_address_new", has_construct_function = false)]
		public IP6Address ();
		[CCode (cname = "nm_ip6_address_compare")]
		public bool compare (NM.IP6Address other);
		[CCode (cname = "nm_ip6_address_dup")]
		public NM.IP6Address dup ();
		[CCode (cname = "nm_ip6_address_get_address")]
		public void* get_address ();
		[CCode (cname = "nm_ip6_address_get_gateway")]
		public void* get_gateway ();
		[CCode (cname = "nm_ip6_address_get_prefix")]
		public uint32 get_prefix ();
		[CCode (cname = "nm_ip6_address_ref")]
		public void @ref ();
		[CCode (cname = "nm_ip6_address_set_address")]
		public void set_address (void* addr);
		[CCode (cname = "nm_ip6_address_set_gateway")]
		public void set_gateway (void* gateway);
		[CCode (cname = "nm_ip6_address_set_prefix")]
		public void set_prefix (uint32 prefix);
		[CCode (cname = "nm_ip6_address_unref")]
		public void unref ();
	}
	[CCode (cheader_filename = "nm-setting-ip6-config.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "nm_ip6_route_get_type ()")]
	[Compact]
	public class IP6Route {
		[CCode (cname = "nm_ip6_route_new", has_construct_function = false)]
		public IP6Route ();
		[CCode (cname = "nm_ip6_route_compare")]
		public bool compare (NM.IP6Route other);
		[CCode (cname = "nm_ip6_route_dup")]
		public NM.IP6Route dup ();
		[CCode (cname = "nm_ip6_route_get_dest")]
		public void* get_dest ();
		[CCode (cname = "nm_ip6_route_get_metric")]
		public uint32 get_metric ();
		[CCode (cname = "nm_ip6_route_get_next_hop")]
		public void* get_next_hop ();
		[CCode (cname = "nm_ip6_route_get_prefix")]
		public uint32 get_prefix ();
		[CCode (cname = "nm_ip6_route_ref")]
		public void @ref ();
		[CCode (cname = "nm_ip6_route_set_dest")]
		public void set_dest (void* dest);
		[CCode (cname = "nm_ip6_route_set_metric")]
		public void set_metric (uint32 metric);
		[CCode (cname = "nm_ip6_route_set_next_hop")]
		public void set_next_hop (void* next_hop);
		[CCode (cname = "nm_ip6_route_set_prefix")]
		public void set_prefix (uint32 prefix);
		[CCode (cname = "nm_ip6_route_unref")]
		public void unref ();
	}
	[CCode (cheader_filename = "nm-setting.h", type_id = "nm_setting_get_type ()")]
	public abstract class Setting : GLib.Object {
		[CCode (cheader_filename = "nm-setting.h", cname = "NM_SETTING_PARAM_FUZZY_IGNORE")]
		public const int FUZZY_IGNORE;
		[CCode (cheader_filename = "nm-setting.h", cname = "NM_SETTING_PARAM_REQUIRED")]
		public const int REQUIRED;
		[CCode (cheader_filename = "nm-setting.h", cname = "NM_SETTING_PARAM_SECRET")]
		public const int SECRET;
		[CCode (cheader_filename = "nm-setting.h", cname = "NM_SETTING_PARAM_SERIALIZE")]
		public const int SERIALIZE;
		[CCode (has_construct_function = false)]
		protected Setting ();
		[CCode (cheader_filename = "nm-setting-8021x.h", cname = "nm_setting_802_1x_error_quark")]
		public static GLib.Quark @802_1x_error_quark ();
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "nm_setting_adsl_error_quark")]
		public static GLib.Quark adsl_error_quark ();
		[CCode (cheader_filename = "nm-setting-bluetooth.h", cname = "nm_setting_bluetooth_error_quark")]
		public static GLib.Quark bluetooth_error_quark ();
		[CCode (cheader_filename = "nm-setting-bond.h", cname = "nm_setting_bond_error_quark")]
		public static GLib.Quark bond_error_quark ();
		[CCode (cheader_filename = "nm-setting-cdma.h", cname = "nm_setting_cdma_error_quark")]
		public static GLib.Quark cdma_error_quark ();
		[CCode (cname = "nm_setting_clear_secrets")]
		public void clear_secrets ();
		[CCode (cname = "nm_setting_clear_secrets_with_flags")]
		public void clear_secrets_with_flags (NM.SettingClearSecretsWithFlagsFn func);
		[CCode (cname = "nm_setting_compare")]
		public bool compare (NM.Setting b, NM.SettingCompareFlags flags);
		[NoWrapper]
		public virtual bool compare_property (NM.Setting other, GLib.ParamSpec prop_spec, NM.SettingCompareFlags flags);
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "nm_setting_connection_error_quark")]
		public static GLib.Quark connection_error_quark ();
		[CCode (cname = "nm_setting_diff")]
		public bool diff (NM.Setting b, NM.SettingCompareFlags flags, bool invert_results, ref GLib.HashTable<string,uint32> results);
		[CCode (cname = "nm_setting_duplicate")]
		public NM.Setting duplicate ();
		[CCode (cname = "nm_setting_enumerate_values")]
		public void enumerate_values (NM.SettingValueIterFn func);
		[CCode (cheader_filename = "nm-setting.h", cname = "nm_setting_error_quark")]
		public static GLib.Quark error_quark ();
		[CCode (cname = "nm_setting_new_from_hash", has_construct_function = false)]
		public Setting.from_hash (GLib.Type setting_type, GLib.HashTable<string,GLib.Value?> hash);
		[CCode (cname = "nm_setting_get_name")]
		public unowned string get_name ();
		[CCode (cname = "nm_setting_get_secret_flags")]
		public bool get_secret_flags (string secret_name, NM.SettingSecretFlags out_flags) throws GLib.Error;
		public virtual unowned string get_virtual_iface_name ();
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "nm_setting_gsm_error_quark")]
		public static GLib.Quark gsm_error_quark ();
		[CCode (cheader_filename = "nm-setting-infiniband.h", cname = "nm_setting_infiniband_error_quark")]
		public static GLib.Quark infiniband_error_quark ();
		[CCode (cheader_filename = "nm-setting-ip4-config.h", cname = "nm_setting_ip4_config_error_quark")]
		public static GLib.Quark ip4_config_error_quark ();
		[CCode (cheader_filename = "nm-setting-ip6-config.h", cname = "nm_setting_ip6_config_error_quark")]
		public static GLib.Quark ip6_config_error_quark ();
		public virtual GLib.GenericArray<string> need_secrets ();
		[CCode (cheader_filename = "nm-setting-olpc-mesh.h", cname = "nm_setting_olpc_mesh_error_quark")]
		public static GLib.Quark olpc_mesh_error_quark ();
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "nm_setting_ppp_error_quark")]
		public static GLib.Quark ppp_error_quark ();
		[CCode (cheader_filename = "nm-setting-pppoe.h", cname = "nm_setting_pppoe_error_quark")]
		public static GLib.Quark pppoe_error_quark ();
		[CCode (cheader_filename = "nm-setting-serial.h", cname = "nm_setting_serial_error_quark")]
		public static GLib.Quark serial_error_quark ();
		[CCode (cname = "nm_setting_set_secret_flags")]
		public bool set_secret_flags (string secret_name, NM.SettingSecretFlags flags) throws GLib.Error;
		[CCode (cname = "nm_setting_to_hash")]
		public GLib.HashTable<string,GLib.Value?> to_hash (NM.SettingHashFlags flags);
		[CCode (cname = "nm_setting_to_string")]
		public string to_string ();
		[NoWrapper]
		public virtual bool update_one_secret (string key, GLib.Value value) throws GLib.Error;
		[CCode (cname = "nm_setting_update_secrets")]
		public bool update_secrets (GLib.HashTable<string,GLib.Value?> secrets) throws GLib.Error;
		public virtual bool verify (GLib.SList<NM.Setting> all_settings) throws GLib.Error;
		[CCode (cheader_filename = "nm-setting-vlan.h", cname = "nm_setting_vlan_error_quark")]
		public static GLib.Quark vlan_error_quark ();
		[CCode (cheader_filename = "nm-setting-vpn.h", cname = "nm_setting_vpn_error_quark")]
		public static GLib.Quark vpn_error_quark ();
		[CCode (cheader_filename = "nm-setting-wimax.h", cname = "nm_setting_wimax_error_quark")]
		public static GLib.Quark wimax_error_quark ();
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "nm_setting_wired_error_quark")]
		public static GLib.Quark wired_error_quark ();
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "nm_setting_wireless_error_quark")]
		public static GLib.Quark wireless_error_quark ();
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "nm_setting_wireless_security_error_quark")]
		public static GLib.Quark wireless_security_error_quark ();
		[NoAccessorMethod]
		public string name { owned get; set; }
	}
	[CCode (cheader_filename = "nm-setting-8021x.h", lower_case_csuffix = "setting_802_1x", type_id = "nm_setting_802_1x_get_type ()")]
	public class Setting8021x : NM.Setting {
		[CCode (cname = "NM_SETTING_802_1X_ALTSUBJECT_MATCHES")]
		public const string ALTSUBJECT_MATCHES;
		[CCode (cname = "NM_SETTING_802_1X_ANONYMOUS_IDENTITY")]
		public const string ANONYMOUS_IDENTITY;
		[CCode (cname = "NM_SETTING_802_1X_CA_CERT")]
		public const string CA_CERT;
		[CCode (cname = "NM_SETTING_802_1X_CA_PATH")]
		public const string CA_PATH;
		[CCode (cname = "NM_SETTING_802_1X_CLIENT_CERT")]
		public const string CLIENT_CERT;
		[CCode (cname = "NM_SETTING_802_1X_EAP")]
		public const string EAP;
		[CCode (cname = "NM_SETTING_802_1X_IDENTITY")]
		public const string IDENTITY;
		[CCode (cname = "NM_SETTING_802_1X_PAC_FILE")]
		public const string PAC_FILE;
		[CCode (cname = "NM_SETTING_802_1X_PASSWORD")]
		public const string PASSWORD;
		[CCode (cname = "NM_SETTING_802_1X_PASSWORD_FLAGS")]
		public const string PASSWORD_FLAGS;
		[CCode (cname = "NM_SETTING_802_1X_PASSWORD_RAW")]
		public const string PASSWORD_RAW;
		[CCode (cname = "NM_SETTING_802_1X_PASSWORD_RAW_FLAGS")]
		public const string PASSWORD_RAW_FLAGS;
		[CCode (cname = "NM_SETTING_802_1X_PHASE1_FAST_PROVISIONING")]
		public const string PHASE1_FAST_PROVISIONING;
		[CCode (cname = "NM_SETTING_802_1X_PHASE1_PEAPLABEL")]
		public const string PHASE1_PEAPLABEL;
		[CCode (cname = "NM_SETTING_802_1X_PHASE1_PEAPVER")]
		public const string PHASE1_PEAPVER;
		[CCode (cname = "NM_SETTING_802_1X_PHASE2_ALTSUBJECT_MATCHES")]
		public const string PHASE2_ALTSUBJECT_MATCHES;
		[CCode (cname = "NM_SETTING_802_1X_PHASE2_AUTH")]
		public const string PHASE2_AUTH;
		[CCode (cname = "NM_SETTING_802_1X_PHASE2_AUTHEAP")]
		public const string PHASE2_AUTHEAP;
		[CCode (cname = "NM_SETTING_802_1X_PHASE2_CA_CERT")]
		public const string PHASE2_CA_CERT;
		[CCode (cname = "NM_SETTING_802_1X_PHASE2_CA_PATH")]
		public const string PHASE2_CA_PATH;
		[CCode (cname = "NM_SETTING_802_1X_PHASE2_CLIENT_CERT")]
		public const string PHASE2_CLIENT_CERT;
		[CCode (cname = "NM_SETTING_802_1X_PHASE2_PRIVATE_KEY")]
		public const string PHASE2_PRIVATE_KEY;
		[CCode (cname = "NM_SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD")]
		public const string PHASE2_PRIVATE_KEY_PASSWORD;
		[CCode (cname = "NM_SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD_FLAGS")]
		public const string PHASE2_PRIVATE_KEY_PASSWORD_FLAGS;
		[CCode (cname = "NM_SETTING_802_1X_PHASE2_SUBJECT_MATCH")]
		public const string PHASE2_SUBJECT_MATCH;
		[CCode (cname = "NM_SETTING_802_1X_PIN")]
		public const string PIN;
		[CCode (cname = "NM_SETTING_802_1X_PIN_FLAGS")]
		public const string PIN_FLAGS;
		[CCode (cname = "NM_SETTING_802_1X_PRIVATE_KEY")]
		public const string PRIVATE_KEY;
		[CCode (cname = "NM_SETTING_802_1X_PRIVATE_KEY_PASSWORD")]
		public const string PRIVATE_KEY_PASSWORD;
		[CCode (cname = "NM_SETTING_802_1X_PRIVATE_KEY_PASSWORD_FLAGS")]
		public const string PRIVATE_KEY_PASSWORD_FLAGS;
		[CCode (cname = "NM_SETTING_802_1X_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cname = "NM_SETTING_802_1X_SUBJECT_MATCH")]
		public const string SUBJECT_MATCH;
		[CCode (cname = "NM_SETTING_802_1X_SYSTEM_CA_CERTS")]
		public const string SYSTEM_CA_CERTS;
		[CCode (cname = "nm_setting_802_1x_new", has_construct_function = false, type = "NMSetting*")]
		public Setting8021x ();
		[CCode (cname = "nm_setting_802_1x_add_altsubject_match")]
		public bool add_altsubject_match (string altsubject_match);
		[CCode (cname = "nm_setting_802_1x_add_eap_method")]
		public bool add_eap_method (string eap);
		[CCode (cname = "nm_setting_802_1x_add_phase2_altsubject_match")]
		public bool add_phase2_altsubject_match (string phase2_altsubject_match);
		[CCode (cname = "nm_setting_802_1x_clear_altsubject_matches")]
		public void clear_altsubject_matches ();
		[CCode (cname = "nm_setting_802_1x_clear_eap_methods")]
		public void clear_eap_methods ();
		[CCode (cname = "nm_setting_802_1x_clear_phase2_altsubject_matches")]
		public void clear_phase2_altsubject_matches ();
		[CCode (cname = "nm_setting_802_1x_get_altsubject_match")]
		public unowned string get_altsubject_match (uint32 i);
		[CCode (cname = "nm_setting_802_1x_get_anonymous_identity")]
		public unowned string get_anonymous_identity ();
		[CCode (cname = "nm_setting_802_1x_get_ca_cert_blob")]
		public unowned GLib.ByteArray get_ca_cert_blob ();
		[CCode (cname = "nm_setting_802_1x_get_ca_cert_path")]
		public unowned string get_ca_cert_path ();
		[CCode (cname = "nm_setting_802_1x_get_ca_cert_scheme")]
		public NM.Setting8021xCKScheme get_ca_cert_scheme ();
		[CCode (cname = "nm_setting_802_1x_get_ca_path")]
		public unowned string get_ca_path ();
		[CCode (cname = "nm_setting_802_1x_get_client_cert_blob")]
		public unowned GLib.ByteArray get_client_cert_blob ();
		[CCode (cname = "nm_setting_802_1x_get_client_cert_path")]
		public unowned string get_client_cert_path ();
		[CCode (cname = "nm_setting_802_1x_get_client_cert_scheme")]
		public NM.Setting8021xCKScheme get_client_cert_scheme ();
		[CCode (cname = "nm_setting_802_1x_get_eap_method")]
		public unowned string get_eap_method (uint32 i);
		[CCode (cname = "nm_setting_802_1x_get_identity")]
		public unowned string get_identity ();
		[CCode (cname = "nm_setting_802_1x_get_num_altsubject_matches")]
		public uint32 get_num_altsubject_matches ();
		[CCode (cname = "nm_setting_802_1x_get_num_eap_methods")]
		public uint32 get_num_eap_methods ();
		[CCode (cname = "nm_setting_802_1x_get_num_phase2_altsubject_matches")]
		public uint32 get_num_phase2_altsubject_matches ();
		[CCode (cname = "nm_setting_802_1x_get_pac_file")]
		public unowned string get_pac_file ();
		[CCode (cname = "nm_setting_802_1x_get_password")]
		public unowned string get_password ();
		[CCode (cname = "nm_setting_802_1x_get_password_flags")]
		public NM.SettingSecretFlags get_password_flags ();
		[CCode (cname = "nm_setting_802_1x_get_password_raw")]
		public unowned GLib.ByteArray get_password_raw ();
		[CCode (cname = "nm_setting_802_1x_get_password_raw_flags")]
		public NM.SettingSecretFlags get_password_raw_flags ();
		[CCode (cname = "nm_setting_802_1x_get_phase1_fast_provisioning")]
		public unowned string get_phase1_fast_provisioning ();
		[CCode (cname = "nm_setting_802_1x_get_phase1_peaplabel")]
		public unowned string get_phase1_peaplabel ();
		[CCode (cname = "nm_setting_802_1x_get_phase1_peapver")]
		public unowned string get_phase1_peapver ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_altsubject_match")]
		public unowned string get_phase2_altsubject_match (uint32 i);
		[CCode (cname = "nm_setting_802_1x_get_phase2_auth")]
		public unowned string get_phase2_auth ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_autheap")]
		public unowned string get_phase2_autheap ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_ca_cert_blob")]
		public unowned GLib.ByteArray get_phase2_ca_cert_blob ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_ca_cert_path")]
		public unowned string get_phase2_ca_cert_path ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_ca_cert_scheme")]
		public NM.Setting8021xCKScheme get_phase2_ca_cert_scheme ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_ca_path")]
		public unowned string get_phase2_ca_path ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_client_cert_blob")]
		public unowned GLib.ByteArray get_phase2_client_cert_blob ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_client_cert_path")]
		public unowned string get_phase2_client_cert_path ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_client_cert_scheme")]
		public NM.Setting8021xCKScheme get_phase2_client_cert_scheme ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_private_key_blob")]
		public unowned GLib.ByteArray get_phase2_private_key_blob ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_private_key_format")]
		public NM.Setting8021xCKFormat get_phase2_private_key_format ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_private_key_password")]
		public unowned string get_phase2_private_key_password ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_private_key_password_flags")]
		public NM.SettingSecretFlags get_phase2_private_key_password_flags ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_private_key_path")]
		public unowned string get_phase2_private_key_path ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_private_key_scheme")]
		public NM.Setting8021xCKScheme get_phase2_private_key_scheme ();
		[CCode (cname = "nm_setting_802_1x_get_phase2_subject_match")]
		public unowned string get_phase2_subject_match ();
		[CCode (cname = "nm_setting_802_1x_get_pin")]
		public unowned string get_pin ();
		[CCode (cname = "nm_setting_802_1x_get_pin_flags")]
		public NM.SettingSecretFlags get_pin_flags ();
		[CCode (cname = "nm_setting_802_1x_get_private_key_blob")]
		public unowned GLib.ByteArray get_private_key_blob ();
		[CCode (cname = "nm_setting_802_1x_get_private_key_format")]
		public NM.Setting8021xCKFormat get_private_key_format ();
		[CCode (cname = "nm_setting_802_1x_get_private_key_password")]
		public unowned string get_private_key_password ();
		[CCode (cname = "nm_setting_802_1x_get_private_key_password_flags")]
		public NM.SettingSecretFlags get_private_key_password_flags ();
		[CCode (cname = "nm_setting_802_1x_get_private_key_path")]
		public unowned string get_private_key_path ();
		[CCode (cname = "nm_setting_802_1x_get_private_key_scheme")]
		public NM.Setting8021xCKScheme get_private_key_scheme ();
		[CCode (cname = "nm_setting_802_1x_get_subject_match")]
		public unowned string get_subject_match ();
		[CCode (cname = "nm_setting_802_1x_get_system_ca_certs")]
		public bool get_system_ca_certs ();
		[CCode (cname = "nm_setting_802_1x_remove_altsubject_match")]
		public void remove_altsubject_match (uint32 i);
		[CCode (cname = "nm_setting_802_1x_remove_eap_method")]
		public void remove_eap_method (uint32 i);
		[CCode (cname = "nm_setting_802_1x_remove_phase2_altsubject_match")]
		public void remove_phase2_altsubject_match (uint32 i);
		[CCode (cname = "nm_setting_802_1x_set_ca_cert")]
		public bool set_ca_cert (string cert_path, NM.Setting8021xCKScheme scheme, NM.Setting8021xCKFormat out_format) throws GLib.Error;
		[CCode (cname = "nm_setting_802_1x_set_client_cert")]
		public bool set_client_cert (string cert_path, NM.Setting8021xCKScheme scheme, NM.Setting8021xCKFormat out_format) throws GLib.Error;
		[CCode (cname = "nm_setting_802_1x_set_phase2_ca_cert")]
		public bool set_phase2_ca_cert (string cert_path, NM.Setting8021xCKScheme scheme, NM.Setting8021xCKFormat out_format) throws GLib.Error;
		[CCode (cname = "nm_setting_802_1x_set_phase2_client_cert")]
		public bool set_phase2_client_cert (string cert_path, NM.Setting8021xCKScheme scheme, NM.Setting8021xCKFormat out_format) throws GLib.Error;
		[CCode (cname = "nm_setting_802_1x_set_phase2_private_key")]
		public bool set_phase2_private_key (string key_path, string password, NM.Setting8021xCKScheme scheme, NM.Setting8021xCKFormat out_format) throws GLib.Error;
		[CCode (cname = "nm_setting_802_1x_set_private_key")]
		public bool set_private_key (string key_path, string password, NM.Setting8021xCKScheme scheme, NM.Setting8021xCKFormat out_format) throws GLib.Error;
		[NoAccessorMethod]
		public string anonymous_identity { owned get; set; }
		[NoAccessorMethod]
		public string ca_path { owned get; set; }
		[NoAccessorMethod]
		public string identity { owned get; set; }
		[NoAccessorMethod]
		public string pac_file { owned get; set; }
		[NoAccessorMethod]
		public string password { owned get; set; }
		[NoAccessorMethod]
		public uint password_flags { get; set; }
		[NoAccessorMethod]
		public uint password_raw_flags { get; set; }
		[NoAccessorMethod]
		public string phase1_fast_provisioning { owned get; set; }
		[NoAccessorMethod]
		public string phase1_peaplabel { owned get; set; }
		[NoAccessorMethod]
		public string phase1_peapver { owned get; set; }
		[NoAccessorMethod]
		public string phase2_auth { owned get; set; }
		[NoAccessorMethod]
		public string phase2_autheap { owned get; set; }
		[NoAccessorMethod]
		public string phase2_ca_path { owned get; set; }
		[NoAccessorMethod]
		public string phase2_private_key_password { owned get; set; }
		[NoAccessorMethod]
		public uint phase2_private_key_password_flags { get; set; }
		[NoAccessorMethod]
		public string phase2_subject_match { owned get; set; }
		[NoAccessorMethod]
		public string private_key_password { owned get; set; }
		[NoAccessorMethod]
		public uint private_key_password_flags { get; set; }
		[NoAccessorMethod]
		public string subject_match { owned get; set; }
		[NoAccessorMethod]
		public bool system_ca_certs { get; set construct; }
	}
	[CCode (cheader_filename = "nm-setting-adsl.h", type_id = "nm_setting_adsl_get_type ()")]
	public class SettingAdsl : NM.Setting {
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_ENCAPSULATION")]
		public const string ENCAPSULATION;
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_ENCAPSULATION_LLC")]
		public const string ENCAPSULATION_LLC;
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_ENCAPSULATION_VCMUX")]
		public const string ENCAPSULATION_VCMUX;
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_PASSWORD")]
		public const string PASSWORD;
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_PASSWORD_FLAGS")]
		public const string PASSWORD_FLAGS;
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_PROTOCOL")]
		public const string PROTOCOL;
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_PROTOCOL_IPOATM")]
		public const string PROTOCOL_IPOATM;
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_PROTOCOL_PPPOA")]
		public const string PROTOCOL_PPPOA;
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_PROTOCOL_PPPOE")]
		public const string PROTOCOL_PPPOE;
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_USERNAME")]
		public const string USERNAME;
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_VCI")]
		public const string VCI;
		[CCode (cheader_filename = "nm-setting-adsl.h", cname = "NM_SETTING_ADSL_VPI")]
		public const string VPI;
		[CCode (cname = "nm_setting_adsl_new", has_construct_function = false, type = "NMSetting*")]
		public SettingAdsl ();
		[CCode (cname = "nm_setting_adsl_get_encapsulation")]
		public unowned string get_encapsulation ();
		[CCode (cname = "nm_setting_adsl_get_password")]
		public unowned string get_password ();
		[CCode (cname = "nm_setting_adsl_get_password_flags")]
		public NM.SettingSecretFlags get_password_flags ();
		[CCode (cname = "nm_setting_adsl_get_protocol")]
		public unowned string get_protocol ();
		[CCode (cname = "nm_setting_adsl_get_username")]
		public unowned string get_username ();
		[CCode (cname = "nm_setting_adsl_get_vci")]
		public uint32 get_vci ();
		[CCode (cname = "nm_setting_adsl_get_vpi")]
		public uint32 get_vpi ();
		[NoAccessorMethod]
		public string encapsulation { owned get; set; }
		[NoAccessorMethod]
		public string password { owned get; set; }
		[NoAccessorMethod]
		public uint password_flags { get; set; }
		[NoAccessorMethod]
		public string protocol { owned get; set; }
		[NoAccessorMethod]
		public string username { owned get; set; }
		[NoAccessorMethod]
		public uint vci { get; set; }
		[NoAccessorMethod]
		public uint vpi { get; set; }
	}
	[CCode (cheader_filename = "nm-setting-bluetooth.h", type_id = "nm_setting_bluetooth_get_type ()")]
	public class SettingBluetooth : NM.Setting {
		[CCode (cheader_filename = "nm-setting-bluetooth.h", cname = "NM_SETTING_BLUETOOTH_BDADDR")]
		public const string BDADDR;
		[CCode (cheader_filename = "nm-setting-bluetooth.h", cname = "NM_SETTING_BLUETOOTH_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-bluetooth.h", cname = "NM_SETTING_BLUETOOTH_TYPE")]
		public const string TYPE;
		[CCode (cheader_filename = "nm-setting-bluetooth.h", cname = "NM_SETTING_BLUETOOTH_TYPE_DUN")]
		public const string TYPE_DUN;
		[CCode (cheader_filename = "nm-setting-bluetooth.h", cname = "NM_SETTING_BLUETOOTH_TYPE_PANU")]
		public const string TYPE_PANU;
		[CCode (cname = "nm_setting_bluetooth_new", has_construct_function = false, type = "NMSetting*")]
		public SettingBluetooth ();
		[CCode (cname = "nm_setting_bluetooth_get_bdaddr")]
		public unowned GLib.ByteArray get_bdaddr ();
		[CCode (cname = "nm_setting_bluetooth_get_connection_type")]
		public unowned string get_connection_type ();
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "nm-setting-bond.h", type_id = "nm_setting_bond_get_type ()")]
	public class SettingBond : NM.Setting {
		[CCode (cheader_filename = "nm-setting-bond.h", cname = "NM_SETTING_BOND_INTERFACE_NAME")]
		public const string INTERFACE_NAME;
		[CCode (cheader_filename = "nm-setting-bond.h", cname = "NM_SETTING_BOND_OPTIONS")]
		public const string OPTIONS;
		[CCode (cheader_filename = "nm-setting-bond.h", cname = "NM_SETTING_BOND_OPTION_ARP_INTERVAL")]
		public const string OPTION_ARP_INTERVAL;
		[CCode (cheader_filename = "nm-setting-bond.h", cname = "NM_SETTING_BOND_OPTION_ARP_IP_TARGET")]
		public const string OPTION_ARP_IP_TARGET;
		[CCode (cheader_filename = "nm-setting-bond.h", cname = "NM_SETTING_BOND_OPTION_DOWNDELAY")]
		public const string OPTION_DOWNDELAY;
		[CCode (cheader_filename = "nm-setting-bond.h", cname = "NM_SETTING_BOND_OPTION_MIIMON")]
		public const string OPTION_MIIMON;
		[CCode (cheader_filename = "nm-setting-bond.h", cname = "NM_SETTING_BOND_OPTION_MODE")]
		public const string OPTION_MODE;
		[CCode (cheader_filename = "nm-setting-bond.h", cname = "NM_SETTING_BOND_OPTION_UPDELAY")]
		public const string OPTION_UPDELAY;
		[CCode (cheader_filename = "nm-setting-bond.h", cname = "NM_SETTING_BOND_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cname = "nm_setting_bond_new", has_construct_function = false, type = "NMSetting*")]
		public SettingBond ();
		[CCode (cname = "nm_setting_bond_add_option")]
		public bool add_option (string name, string value);
		[CCode (cname = "nm_setting_bond_get_interface_name")]
		public unowned string get_interface_name ();
		[CCode (cname = "nm_setting_bond_get_num_options")]
		public uint32 get_num_options ();
		[CCode (cname = "nm_setting_bond_get_option")]
		public bool get_option (uint32 idx, out string out_name, out string out_value);
		[CCode (cname = "nm_setting_bond_get_option_by_name")]
		public unowned string get_option_by_name (string name);
		[CCode (cname = "nm_setting_bond_get_option_default")]
		public unowned string get_option_default (string name);
		[CCode (cname = "nm_setting_bond_remove_option")]
		public bool remove_option (string name);
		[NoAccessorMethod]
		public string interface_name { owned get; set; }
	}
	[CCode (cheader_filename = "nm-setting-cdma.h", type_id = "nm_setting_cdma_get_type ()")]
	public class SettingCdma : NM.Setting {
		[CCode (cheader_filename = "nm-setting-cdma.h", cname = "NM_SETTING_CDMA_NUMBER")]
		public const string NUMBER;
		[CCode (cheader_filename = "nm-setting-cdma.h", cname = "NM_SETTING_CDMA_PASSWORD")]
		public const string PASSWORD;
		[CCode (cheader_filename = "nm-setting-cdma.h", cname = "NM_SETTING_CDMA_PASSWORD_FLAGS")]
		public const string PASSWORD_FLAGS;
		[CCode (cheader_filename = "nm-setting-cdma.h", cname = "NM_SETTING_CDMA_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-cdma.h", cname = "NM_SETTING_CDMA_USERNAME")]
		public const string USERNAME;
		[CCode (cname = "nm_setting_cdma_new", has_construct_function = false, type = "NMSetting*")]
		public SettingCdma ();
		[CCode (cname = "nm_setting_cdma_get_number")]
		public unowned string get_number ();
		[CCode (cname = "nm_setting_cdma_get_password")]
		public unowned string get_password ();
		[CCode (cname = "nm_setting_cdma_get_password_flags")]
		public NM.SettingSecretFlags get_password_flags ();
		[CCode (cname = "nm_setting_cdma_get_username")]
		public unowned string get_username ();
		[NoAccessorMethod]
		public string number { owned get; set; }
		[NoAccessorMethod]
		public string password { owned get; set; }
		[NoAccessorMethod]
		public uint password_flags { get; set; }
		[NoAccessorMethod]
		public string username { owned get; set; }
	}
	[CCode (cheader_filename = "nm-setting-connection.h", type_id = "nm_setting_connection_get_type ()")]
	public class SettingConnection : NM.Setting {
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_AUTOCONNECT")]
		public const string AUTOCONNECT;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_ID")]
		public const string ID;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_MASTER")]
		public const string MASTER;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_PERMISSIONS")]
		public const string PERMISSIONS;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_READ_ONLY")]
		public const string READ_ONLY;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_SLAVE_TYPE")]
		public const string SLAVE_TYPE;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_TIMESTAMP")]
		public const string TIMESTAMP;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_TYPE")]
		public const string TYPE;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_UUID")]
		public const string UUID;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_ZONE")]
		public const string ZONE;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_ZONE_BLOCK")]
		public const string ZONE_BLOCK;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_ZONE_HOME")]
		public const string ZONE_HOME;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_ZONE_PUBLIC")]
		public const string ZONE_PUBLIC;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_ZONE_TRUSTED")]
		public const string ZONE_TRUSTED;
		[CCode (cheader_filename = "nm-setting-connection.h", cname = "NM_SETTING_CONNECTION_ZONE_WORK")]
		public const string ZONE_WORK;
		[CCode (cname = "nm_setting_connection_new", has_construct_function = false, type = "NMSetting*")]
		public SettingConnection ();
		[CCode (cname = "nm_setting_connection_add_permission")]
		public bool add_permission (string ptype, string pitem, string? detail);
		[CCode (cname = "nm_setting_connection_get_autoconnect")]
		public bool get_autoconnect ();
		[CCode (cname = "nm_setting_connection_get_connection_type")]
		public unowned string get_connection_type ();
		[CCode (cname = "nm_setting_connection_get_id")]
		public unowned string get_id ();
		[CCode (cname = "nm_setting_connection_get_master")]
		public unowned string get_master ();
		[CCode (cname = "nm_setting_connection_get_num_permissions")]
		public uint32 get_num_permissions ();
		[CCode (cname = "nm_setting_connection_get_permission")]
		public bool get_permission (uint32 idx, string out_ptype, string out_pitem, string out_detail);
		[CCode (cname = "nm_setting_connection_get_read_only")]
		public bool get_read_only ();
		[CCode (cname = "nm_setting_connection_get_slave_type")]
		public unowned string get_slave_type ();
		[CCode (cname = "nm_setting_connection_get_timestamp")]
		public uint64 get_timestamp ();
		[CCode (cname = "nm_setting_connection_get_uuid")]
		public unowned string get_uuid ();
		[CCode (cname = "nm_setting_connection_get_zone")]
		public unowned string get_zone ();
		[CCode (cname = "nm_setting_connection_is_slave_type")]
		public bool is_slave_type (string type);
		[CCode (cname = "nm_setting_connection_permissions_user_allowed")]
		public bool permissions_user_allowed (string uname);
		[CCode (cname = "nm_setting_connection_remove_permission")]
		public void remove_permission (uint32 idx);
		[NoAccessorMethod]
		public bool autoconnect { get; set construct; }
		[NoAccessorMethod]
		public string id { owned get; set; }
		[NoAccessorMethod]
		public string master { owned get; set; }
		[NoAccessorMethod]
		public bool read_only { get; set construct; }
		[NoAccessorMethod]
		public string slave_type { owned get; set; }
		[NoAccessorMethod]
		public uint64 timestamp { get; set construct; }
		[NoAccessorMethod]
		public string type { owned get; set; }
		[NoAccessorMethod]
		public string uuid { owned get; set; }
		[NoAccessorMethod]
		public string zone { owned get; set construct; }
	}
	[CCode (cheader_filename = "nm-setting-gsm.h", type_id = "nm_setting_gsm_get_type ()")]
	public class SettingGsm : NM.Setting {
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "NM_SETTING_GSM_ALLOWED_BANDS")]
		public const string ALLOWED_BANDS;
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "NM_SETTING_GSM_APN")]
		public const string APN;
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "NM_SETTING_GSM_HOME_ONLY")]
		public const string HOME_ONLY;
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "NM_SETTING_GSM_NETWORK_ID")]
		public const string NETWORK_ID;
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "NM_SETTING_GSM_NETWORK_TYPE")]
		public const string NETWORK_TYPE;
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "NM_SETTING_GSM_NUMBER")]
		public const string NUMBER;
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "NM_SETTING_GSM_PASSWORD")]
		public const string PASSWORD;
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "NM_SETTING_GSM_PASSWORD_FLAGS")]
		public const string PASSWORD_FLAGS;
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "NM_SETTING_GSM_PIN")]
		public const string PIN;
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "NM_SETTING_GSM_PIN_FLAGS")]
		public const string PIN_FLAGS;
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "NM_SETTING_GSM_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-gsm.h", cname = "NM_SETTING_GSM_USERNAME")]
		public const string USERNAME;
		[CCode (cname = "nm_setting_gsm_new", has_construct_function = false, type = "NMSetting*")]
		public SettingGsm ();
		[CCode (cname = "nm_setting_gsm_get_allowed_bands")]
		public uint32 get_allowed_bands ();
		[CCode (cname = "nm_setting_gsm_get_apn")]
		public unowned string get_apn ();
		[CCode (cname = "nm_setting_gsm_get_home_only")]
		public bool get_home_only ();
		[CCode (cname = "nm_setting_gsm_get_network_id")]
		public unowned string get_network_id ();
		[CCode (cname = "nm_setting_gsm_get_network_type")]
		public int get_network_type ();
		[CCode (cname = "nm_setting_gsm_get_number")]
		public unowned string get_number ();
		[CCode (cname = "nm_setting_gsm_get_password")]
		public unowned string get_password ();
		[CCode (cname = "nm_setting_gsm_get_password_flags")]
		public NM.SettingSecretFlags get_password_flags ();
		[CCode (cname = "nm_setting_gsm_get_pin")]
		public unowned string get_pin ();
		[CCode (cname = "nm_setting_gsm_get_pin_flags")]
		public NM.SettingSecretFlags get_pin_flags ();
		[CCode (cname = "nm_setting_gsm_get_username")]
		public unowned string get_username ();
		[NoAccessorMethod]
		public uint allowed_bands { get; set construct; }
		[NoAccessorMethod]
		public string apn { owned get; set; }
		[NoAccessorMethod]
		public bool home_only { get; set; }
		[NoAccessorMethod]
		public string network_id { owned get; set; }
		[NoAccessorMethod]
		public int network_type { get; set construct; }
		[NoAccessorMethod]
		public string number { owned get; set; }
		[NoAccessorMethod]
		public string password { owned get; set; }
		[NoAccessorMethod]
		public uint password_flags { get; set; }
		[NoAccessorMethod]
		public string pin { owned get; set; }
		[NoAccessorMethod]
		public uint pin_flags { get; set; }
		[NoAccessorMethod]
		public string username { owned get; set; }
	}
	[CCode (cheader_filename = "nm-setting-ip4-config.h", type_id = "nm_setting_ip4_config_get_type ()")]
	public class SettingIP4Config : NM.Setting {
		[CCode (cname = "nm_setting_ip4_config_new", has_construct_function = false, type = "NMSetting*")]
		public SettingIP4Config ();
		[CCode (cname = "nm_setting_ip4_config_add_address")]
		public bool add_address (NM.IP4Address address);
		[CCode (cname = "nm_setting_ip4_config_add_dns")]
		public bool add_dns (uint32 dns);
		[CCode (cname = "nm_setting_ip4_config_add_dns_search")]
		public bool add_dns_search (string dns_search);
		[CCode (cname = "nm_setting_ip4_config_add_route")]
		public bool add_route (NM.IP4Route route);
		[CCode (cname = "nm_setting_ip4_config_clear_addresses")]
		public void clear_addresses ();
		[CCode (cname = "nm_setting_ip4_config_clear_dns")]
		public void clear_dns ();
		[CCode (cname = "nm_setting_ip4_config_clear_dns_searches")]
		public void clear_dns_searches ();
		[CCode (cname = "nm_setting_ip4_config_clear_routes")]
		public void clear_routes ();
		[CCode (cname = "nm_setting_ip4_config_get_address")]
		public NM.IP4Address get_address (uint32 i);
		[CCode (cname = "nm_setting_ip4_config_get_dhcp_client_id")]
		public unowned string get_dhcp_client_id ();
		[CCode (cname = "nm_setting_ip4_config_get_dhcp_hostname")]
		public unowned string get_dhcp_hostname ();
		[CCode (cname = "nm_setting_ip4_config_get_dhcp_send_hostname")]
		public bool get_dhcp_send_hostname ();
		[CCode (cname = "nm_setting_ip4_config_get_dns")]
		public uint32 get_dns (uint32 i);
		[CCode (cname = "nm_setting_ip4_config_get_dns_search")]
		public unowned string get_dns_search (uint32 i);
		[CCode (cname = "nm_setting_ip4_config_get_ignore_auto_dns")]
		public bool get_ignore_auto_dns ();
		[CCode (cname = "nm_setting_ip4_config_get_ignore_auto_routes")]
		public bool get_ignore_auto_routes ();
		[CCode (cname = "nm_setting_ip4_config_get_may_fail")]
		public bool get_may_fail ();
		[CCode (cname = "nm_setting_ip4_config_get_method")]
		public unowned string get_method ();
		[CCode (cname = "nm_setting_ip4_config_get_never_default")]
		public bool get_never_default ();
		[CCode (cname = "nm_setting_ip4_config_get_num_addresses")]
		public uint32 get_num_addresses ();
		[CCode (cname = "nm_setting_ip4_config_get_num_dns")]
		public uint32 get_num_dns ();
		[CCode (cname = "nm_setting_ip4_config_get_num_dns_searches")]
		public uint32 get_num_dns_searches ();
		[CCode (cname = "nm_setting_ip4_config_get_num_routes")]
		public uint32 get_num_routes ();
		[CCode (cname = "nm_setting_ip4_config_get_route")]
		public NM.IP4Route get_route (uint32 i);
		[CCode (cname = "nm_setting_ip4_config_remove_address")]
		public void remove_address (uint32 i);
		[CCode (cname = "nm_setting_ip4_config_remove_dns")]
		public void remove_dns (uint32 i);
		[CCode (cname = "nm_setting_ip4_config_remove_dns_search")]
		public void remove_dns_search (uint32 i);
		[CCode (cname = "nm_setting_ip4_config_remove_route")]
		public void remove_route (uint32 i);
		[NoAccessorMethod]
		public string dhcp_client_id { owned get; set; }
		[NoAccessorMethod]
		public string dhcp_hostname { owned get; set; }
		[NoAccessorMethod]
		public bool dhcp_send_hostname { get; set construct; }
		[NoAccessorMethod]
		public bool ignore_auto_dns { get; set construct; }
		[NoAccessorMethod]
		public bool ignore_auto_routes { get; set construct; }
		[NoAccessorMethod]
		public bool may_fail { get; set construct; }
		[NoAccessorMethod]
		public string method { owned get; set; }
		[NoAccessorMethod]
		public bool never_default { get; set construct; }
	}
	[CCode (cheader_filename = "nm-setting-ip6-config.h", type_id = "nm_setting_ip6_config_get_type ()")]
	public class SettingIP6Config : NM.Setting {
		[CCode (cname = "nm_setting_ip6_config_new", has_construct_function = false, type = "NMSetting*")]
		public SettingIP6Config ();
		[CCode (cname = "nm_setting_ip6_config_add_address")]
		public bool add_address (NM.IP6Address address);
		[CCode (cname = "nm_setting_ip6_config_add_dns")]
		public bool add_dns (void* dns);
		[CCode (cname = "nm_setting_ip6_config_add_dns_search")]
		public bool add_dns_search (string dns_search);
		[CCode (cname = "nm_setting_ip6_config_add_route")]
		public bool add_route (NM.IP6Route route);
		[CCode (cname = "nm_setting_ip6_config_clear_addresses")]
		public void clear_addresses ();
		[CCode (cname = "nm_setting_ip6_config_clear_dns")]
		public void clear_dns ();
		[CCode (cname = "nm_setting_ip6_config_clear_dns_searches")]
		public void clear_dns_searches ();
		[CCode (cname = "nm_setting_ip6_config_clear_routes")]
		public void clear_routes ();
		[CCode (cname = "nm_setting_ip6_config_get_address")]
		public NM.IP6Address get_address (uint32 i);
		[CCode (cname = "nm_setting_ip6_config_get_dns")]
		public void* get_dns (uint32 i);
		[CCode (cname = "nm_setting_ip6_config_get_dns_search")]
		public unowned string get_dns_search (uint32 i);
		[CCode (cname = "nm_setting_ip6_config_get_ignore_auto_dns")]
		public bool get_ignore_auto_dns ();
		[CCode (cname = "nm_setting_ip6_config_get_ignore_auto_routes")]
		public bool get_ignore_auto_routes ();
		[CCode (cname = "nm_setting_ip6_config_get_ip6_privacy")]
		public NM.SettingIP6ConfigPrivacy get_ip6_privacy ();
		[CCode (cname = "nm_setting_ip6_config_get_may_fail")]
		public bool get_may_fail ();
		[CCode (cname = "nm_setting_ip6_config_get_method")]
		public unowned string get_method ();
		[CCode (cname = "nm_setting_ip6_config_get_never_default")]
		public bool get_never_default ();
		[CCode (cname = "nm_setting_ip6_config_get_num_addresses")]
		public uint32 get_num_addresses ();
		[CCode (cname = "nm_setting_ip6_config_get_num_dns")]
		public uint32 get_num_dns ();
		[CCode (cname = "nm_setting_ip6_config_get_num_dns_searches")]
		public uint32 get_num_dns_searches ();
		[CCode (cname = "nm_setting_ip6_config_get_num_routes")]
		public uint32 get_num_routes ();
		[CCode (cname = "nm_setting_ip6_config_get_route")]
		public NM.IP6Route get_route (uint32 i);
		[CCode (cname = "nm_setting_ip6_config_remove_address")]
		public void remove_address (uint32 i);
		[CCode (cname = "nm_setting_ip6_config_remove_dns")]
		public void remove_dns (uint32 i);
		[CCode (cname = "nm_setting_ip6_config_remove_dns_search")]
		public void remove_dns_search (uint32 i);
		[CCode (cname = "nm_setting_ip6_config_remove_route")]
		public void remove_route (uint32 i);
		[NoAccessorMethod]
		public bool ignore_auto_dns { get; set construct; }
		[NoAccessorMethod]
		public bool ignore_auto_routes { get; set construct; }
		[NoAccessorMethod]
		public int ip6_privacy { get; set construct; }
		[NoAccessorMethod]
		public bool may_fail { get; set construct; }
		[NoAccessorMethod]
		public string method { owned get; set; }
		[NoAccessorMethod]
		public bool never_default { get; set construct; }
	}
	[CCode (cheader_filename = "nm-setting-infiniband.h", type_id = "nm_setting_infiniband_get_type ()")]
	public class SettingInfiniband : NM.Setting {
		[CCode (cheader_filename = "nm-setting-infiniband.h", cname = "NM_SETTING_INFINIBAND_MAC_ADDRESS")]
		public const string MAC_ADDRESS;
		[CCode (cheader_filename = "nm-setting-infiniband.h", cname = "NM_SETTING_INFINIBAND_MTU")]
		public const string MTU;
		[CCode (cheader_filename = "nm-setting-infiniband.h", cname = "NM_SETTING_INFINIBAND_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-infiniband.h", cname = "NM_SETTING_INFINIBAND_TRANSPORT_MODE")]
		public const string TRANSPORT_MODE;
		[CCode (cname = "nm_setting_infiniband_new", has_construct_function = false, type = "NMSetting*")]
		public SettingInfiniband ();
		[CCode (cname = "nm_setting_infiniband_get_mac_address")]
		public unowned GLib.ByteArray get_mac_address ();
		[CCode (cname = "nm_setting_infiniband_get_mtu")]
		public uint32 get_mtu ();
		[CCode (cname = "nm_setting_infiniband_get_transport_mode")]
		public unowned string get_transport_mode ();
		[NoAccessorMethod]
		public uint mtu { get; set construct; }
		[NoAccessorMethod]
		public string transport_mode { owned get; set construct; }
	}
	[CCode (cheader_filename = "nm-setting-olpc-mesh.h", type_id = "nm_setting_olpc_mesh_get_type ()")]
	public class SettingOlpcMesh : NM.Setting {
		[CCode (cname = "nm_setting_olpc_mesh_new", has_construct_function = false, type = "NMSetting*")]
		public SettingOlpcMesh ();
		[CCode (cname = "nm_setting_olpc_mesh_get_channel")]
		public uint32 get_channel ();
		[CCode (cname = "nm_setting_olpc_mesh_get_dhcp_anycast_address")]
		public unowned GLib.ByteArray get_dhcp_anycast_address ();
		[CCode (cname = "nm_setting_olpc_mesh_get_ssid")]
		public unowned GLib.ByteArray get_ssid ();
		[NoAccessorMethod]
		public uint channel { get; set construct; }
	}
	[CCode (cheader_filename = "nm-setting-ppp.h", type_id = "nm_setting_ppp_get_type ()")]
	public class SettingPPP : NM.Setting {
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_BAUD")]
		public const string BAUD;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_CRTSCTS")]
		public const string CRTSCTS;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_LCP_ECHO_FAILURE")]
		public const string LCP_ECHO_FAILURE;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_LCP_ECHO_INTERVAL")]
		public const string LCP_ECHO_INTERVAL;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_MPPE_STATEFUL")]
		public const string MPPE_STATEFUL;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_MRU")]
		public const string MRU;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_MTU")]
		public const string MTU;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_NOAUTH")]
		public const string NOAUTH;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_NOBSDCOMP")]
		public const string NOBSDCOMP;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_NODEFLATE")]
		public const string NODEFLATE;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_NO_VJ_COMP")]
		public const string NO_VJ_COMP;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_REFUSE_CHAP")]
		public const string REFUSE_CHAP;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_REFUSE_EAP")]
		public const string REFUSE_EAP;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_REFUSE_MSCHAP")]
		public const string REFUSE_MSCHAP;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_REFUSE_MSCHAPV2")]
		public const string REFUSE_MSCHAPV2;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_REFUSE_PAP")]
		public const string REFUSE_PAP;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_REQUIRE_MPPE")]
		public const string REQUIRE_MPPE;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_REQUIRE_MPPE_128")]
		public const string REQUIRE_MPPE_128;
		[CCode (cheader_filename = "nm-setting-ppp.h", cname = "NM_SETTING_PPP_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cname = "nm_setting_ppp_new", has_construct_function = false, type = "NMSetting*")]
		public SettingPPP ();
		[CCode (cname = "nm_setting_ppp_get_baud")]
		public uint32 get_baud ();
		[CCode (cname = "nm_setting_ppp_get_crtscts")]
		public bool get_crtscts ();
		[CCode (cname = "nm_setting_ppp_get_lcp_echo_failure")]
		public uint32 get_lcp_echo_failure ();
		[CCode (cname = "nm_setting_ppp_get_lcp_echo_interval")]
		public uint32 get_lcp_echo_interval ();
		[CCode (cname = "nm_setting_ppp_get_mppe_stateful")]
		public bool get_mppe_stateful ();
		[CCode (cname = "nm_setting_ppp_get_mru")]
		public uint32 get_mru ();
		[CCode (cname = "nm_setting_ppp_get_mtu")]
		public uint32 get_mtu ();
		[CCode (cname = "nm_setting_ppp_get_no_vj_comp")]
		public bool get_no_vj_comp ();
		[CCode (cname = "nm_setting_ppp_get_noauth")]
		public bool get_noauth ();
		[CCode (cname = "nm_setting_ppp_get_nobsdcomp")]
		public bool get_nobsdcomp ();
		[CCode (cname = "nm_setting_ppp_get_nodeflate")]
		public bool get_nodeflate ();
		[CCode (cname = "nm_setting_ppp_get_refuse_chap")]
		public bool get_refuse_chap ();
		[CCode (cname = "nm_setting_ppp_get_refuse_eap")]
		public bool get_refuse_eap ();
		[CCode (cname = "nm_setting_ppp_get_refuse_mschap")]
		public bool get_refuse_mschap ();
		[CCode (cname = "nm_setting_ppp_get_refuse_mschapv2")]
		public bool get_refuse_mschapv2 ();
		[CCode (cname = "nm_setting_ppp_get_refuse_pap")]
		public bool get_refuse_pap ();
		[CCode (cname = "nm_setting_ppp_get_require_mppe")]
		public bool get_require_mppe ();
		[CCode (cname = "nm_setting_ppp_get_require_mppe_128")]
		public bool get_require_mppe_128 ();
		[NoAccessorMethod]
		public uint baud { get; set construct; }
		[NoAccessorMethod]
		public bool crtscts { get; set construct; }
		[NoAccessorMethod]
		public uint lcp_echo_failure { get; set construct; }
		[NoAccessorMethod]
		public uint lcp_echo_interval { get; set construct; }
		[NoAccessorMethod]
		public bool mppe_stateful { get; set construct; }
		[NoAccessorMethod]
		public uint mru { get; set construct; }
		[NoAccessorMethod]
		public uint mtu { get; set construct; }
		[NoAccessorMethod]
		public bool no_vj_comp { get; set construct; }
		[NoAccessorMethod]
		public bool noauth { get; set construct; }
		[NoAccessorMethod]
		public bool nobsdcomp { get; set construct; }
		[NoAccessorMethod]
		public bool nodeflate { get; set construct; }
		[NoAccessorMethod]
		public bool refuse_chap { get; set construct; }
		[NoAccessorMethod]
		public bool refuse_eap { get; set construct; }
		[NoAccessorMethod]
		public bool refuse_mschap { get; set construct; }
		[NoAccessorMethod]
		public bool refuse_mschapv2 { get; set construct; }
		[NoAccessorMethod]
		public bool refuse_pap { get; set construct; }
		[NoAccessorMethod]
		public bool require_mppe { get; set construct; }
		[NoAccessorMethod]
		public bool require_mppe_128 { get; set construct; }
	}
	[CCode (cheader_filename = "nm-setting-pppoe.h", type_id = "nm_setting_pppoe_get_type ()")]
	public class SettingPPPOE : NM.Setting {
		[CCode (cheader_filename = "nm-setting-pppoe.h", cname = "NM_SETTING_PPPOE_PASSWORD")]
		public const string PASSWORD;
		[CCode (cheader_filename = "nm-setting-pppoe.h", cname = "NM_SETTING_PPPOE_PASSWORD_FLAGS")]
		public const string PASSWORD_FLAGS;
		[CCode (cheader_filename = "nm-setting-pppoe.h", cname = "NM_SETTING_PPPOE_SERVICE")]
		public const string SERVICE;
		[CCode (cheader_filename = "nm-setting-pppoe.h", cname = "NM_SETTING_PPPOE_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-pppoe.h", cname = "NM_SETTING_PPPOE_USERNAME")]
		public const string USERNAME;
		[CCode (cname = "nm_setting_pppoe_new", has_construct_function = false, type = "NMSetting*")]
		public SettingPPPOE ();
		[CCode (cname = "nm_setting_pppoe_get_password")]
		public unowned string get_password ();
		[CCode (cname = "nm_setting_pppoe_get_password_flags")]
		public NM.SettingSecretFlags get_password_flags ();
		[CCode (cname = "nm_setting_pppoe_get_service")]
		public unowned string get_service ();
		[CCode (cname = "nm_setting_pppoe_get_username")]
		public unowned string get_username ();
		[NoAccessorMethod]
		public string password { owned get; set; }
		[NoAccessorMethod]
		public uint password_flags { get; set; }
		[NoAccessorMethod]
		public string service { owned get; set; }
		[NoAccessorMethod]
		public string username { owned get; set; }
	}
	[CCode (cheader_filename = "nm-setting-serial.h", type_id = "nm_setting_serial_get_type ()")]
	public class SettingSerial : NM.Setting {
		[CCode (cheader_filename = "nm-setting-serial.h", cname = "NM_SETTING_SERIAL_BAUD")]
		public const string BAUD;
		[CCode (cheader_filename = "nm-setting-serial.h", cname = "NM_SETTING_SERIAL_BITS")]
		public const string BITS;
		[CCode (cheader_filename = "nm-setting-serial.h", cname = "NM_SETTING_SERIAL_PARITY")]
		public const string PARITY;
		[CCode (cheader_filename = "nm-setting-serial.h", cname = "NM_SETTING_SERIAL_SEND_DELAY")]
		public const string SEND_DELAY;
		[CCode (cheader_filename = "nm-setting-serial.h", cname = "NM_SETTING_SERIAL_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-serial.h", cname = "NM_SETTING_SERIAL_STOPBITS")]
		public const string STOPBITS;
		[CCode (cname = "nm_setting_serial_new", has_construct_function = false, type = "NMSetting*")]
		public SettingSerial ();
		[CCode (cname = "nm_setting_serial_get_baud")]
		public uint get_baud ();
		[CCode (cname = "nm_setting_serial_get_bits")]
		public uint get_bits ();
		[CCode (cname = "nm_setting_serial_get_parity")]
		public char get_parity ();
		[CCode (cname = "nm_setting_serial_get_send_delay")]
		public uint64 get_send_delay ();
		[CCode (cname = "nm_setting_serial_get_stopbits")]
		public uint get_stopbits ();
		[NoAccessorMethod]
		public uint baud { get; set construct; }
		[NoAccessorMethod]
		public uint bits { get; set construct; }
		[NoAccessorMethod]
		public char parity { get; set construct; }
		[NoAccessorMethod]
		public uint64 send_delay { get; set construct; }
		[NoAccessorMethod]
		public uint stopbits { get; set construct; }
	}
	[CCode (cheader_filename = "nm-setting-vpn.h", type_id = "nm_setting_vpn_get_type ()")]
	public class SettingVPN : NM.Setting {
		[CCode (cname = "nm_setting_vpn_new", has_construct_function = false, type = "NMSetting*")]
		public SettingVPN ();
		[CCode (cname = "nm_setting_vpn_add_data_item")]
		public void add_data_item (string key, string item);
		[CCode (cname = "nm_setting_vpn_add_secret")]
		public void add_secret (string key, string secret);
		[CCode (cname = "nm_setting_vpn_foreach_data_item")]
		public void foreach_data_item (NM.VPNIterFunc func);
		[CCode (cname = "nm_setting_vpn_foreach_secret")]
		public void foreach_secret (NM.VPNIterFunc func);
		[CCode (cname = "nm_setting_vpn_get_data_item")]
		public unowned string get_data_item (string key);
		[CCode (cname = "nm_setting_vpn_get_num_data_items")]
		public uint32 get_num_data_items ();
		[CCode (cname = "nm_setting_vpn_get_num_secrets")]
		public uint32 get_num_secrets ();
		[CCode (cname = "nm_setting_vpn_get_secret")]
		public unowned string get_secret (string key);
		[CCode (cname = "nm_setting_vpn_get_service_type")]
		public unowned string get_service_type ();
		[CCode (cname = "nm_setting_vpn_get_user_name")]
		public unowned string get_user_name ();
		[CCode (cname = "nm_setting_vpn_remove_data_item")]
		public void remove_data_item (string key);
		[CCode (cname = "nm_setting_vpn_remove_secret")]
		public void remove_secret (string key);
		[NoAccessorMethod]
		public string service_type { owned get; set; }
		[NoAccessorMethod]
		public string user_name { owned get; set; }
	}
	[CCode (cheader_filename = "nm-setting-vlan.h", type_id = "nm_setting_vlan_get_type ()")]
	public class SettingVlan : NM.Setting {
		[CCode (cheader_filename = "nm-setting-vlan.h", cname = "NM_SETTING_VLAN_EGRESS_PRIORITY_MAP")]
		public const string EGRESS_PRIORITY_MAP;
		[CCode (cheader_filename = "nm-setting-vlan.h", cname = "NM_SETTING_VLAN_FLAGS")]
		public const string FLAGS;
		[CCode (cheader_filename = "nm-setting-vlan.h", cname = "NM_SETTING_VLAN_ID")]
		public const string ID;
		[CCode (cheader_filename = "nm-setting-vlan.h", cname = "NM_SETTING_VLAN_INGRESS_PRIORITY_MAP")]
		public const string INGRESS_PRIORITY_MAP;
		[CCode (cheader_filename = "nm-setting-vlan.h", cname = "NM_SETTING_VLAN_INTERFACE_NAME")]
		public const string INTERFACE_NAME;
		[CCode (cheader_filename = "nm-setting-vlan.h", cname = "NM_SETTING_VLAN_PARENT")]
		public const string PARENT;
		[CCode (cheader_filename = "nm-setting-vlan.h", cname = "NM_SETTING_VLAN_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cname = "nm_setting_vlan_new", has_construct_function = false, type = "NMSetting*")]
		public SettingVlan ();
		[CCode (cname = "nm_setting_vlan_add_priority")]
		public bool add_priority (NM.VlanPriorityMap map, uint32 from, uint32 to);
		[CCode (cname = "nm_setting_vlan_add_priority_str")]
		public bool add_priority_str (NM.VlanPriorityMap map, string str);
		[CCode (cname = "nm_setting_vlan_clear_priorities")]
		public void clear_priorities (NM.VlanPriorityMap map);
		[CCode (cname = "nm_setting_vlan_get_flags")]
		public uint32 get_flags ();
		[CCode (cname = "nm_setting_vlan_get_id")]
		public uint32 get_id ();
		[CCode (cname = "nm_setting_vlan_get_interface_name")]
		public unowned string get_interface_name ();
		[CCode (cname = "nm_setting_vlan_get_num_priorities")]
		public int32 get_num_priorities (NM.VlanPriorityMap map);
		[CCode (cname = "nm_setting_vlan_get_parent")]
		public unowned string get_parent ();
		[CCode (cname = "nm_setting_vlan_get_priority")]
		public bool get_priority (NM.VlanPriorityMap map, uint32 idx, out uint32 out_from, out uint32 out_to);
		[CCode (cname = "nm_setting_vlan_remove_priority")]
		public void remove_priority (NM.VlanPriorityMap map, uint32 idx);
		[NoAccessorMethod]
		public uint flags { get; set construct; }
		[NoAccessorMethod]
		public uint id { get; set construct; }
		[NoAccessorMethod]
		public string interface_name { owned get; set construct; }
		[NoAccessorMethod]
		public string parent { owned get; set construct; }
	}
	[CCode (cheader_filename = "nm-setting-wimax.h", type_id = "nm_setting_wimax_get_type ()")]
	public class SettingWimax : NM.Setting {
		[CCode (cheader_filename = "nm-setting-wimax.h", cname = "NM_SETTING_WIMAX_MAC_ADDRESS")]
		public const string MAC_ADDRESS;
		[CCode (cheader_filename = "nm-setting-wimax.h", cname = "NM_SETTING_WIMAX_NETWORK_NAME")]
		public const string NETWORK_NAME;
		[CCode (cheader_filename = "nm-setting-wimax.h", cname = "NM_SETTING_WIMAX_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cname = "nm_setting_wimax_new", has_construct_function = false, type = "NMSetting*")]
		public SettingWimax ();
		[CCode (cname = "nm_setting_wimax_get_mac_address")]
		public unowned GLib.ByteArray get_mac_address ();
		[CCode (cname = "nm_setting_wimax_get_network_name")]
		public unowned string get_network_name ();
		[NoAccessorMethod]
		public string network_name { owned get; set; }
	}
	[CCode (cheader_filename = "nm-setting-wired.h", type_id = "nm_setting_wired_get_type ()")]
	public class SettingWired : NM.Setting {
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "NM_SETTING_WIRED_AUTO_NEGOTIATE")]
		public const string AUTO_NEGOTIATE;
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "NM_SETTING_WIRED_CLONED_MAC_ADDRESS")]
		public const string CLONED_MAC_ADDRESS;
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "NM_SETTING_WIRED_DUPLEX")]
		public const string DUPLEX;
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "NM_SETTING_WIRED_MAC_ADDRESS")]
		public const string MAC_ADDRESS;
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "NM_SETTING_WIRED_MAC_ADDRESS_BLACKLIST")]
		public const string MAC_ADDRESS_BLACKLIST;
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "NM_SETTING_WIRED_MTU")]
		public const string MTU;
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "NM_SETTING_WIRED_PORT")]
		public const string PORT;
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "NM_SETTING_WIRED_S390_NETTYPE")]
		public const string S390_NETTYPE;
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "NM_SETTING_WIRED_S390_OPTIONS")]
		public const string S390_OPTIONS;
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "NM_SETTING_WIRED_S390_SUBCHANNELS")]
		public const string S390_SUBCHANNELS;
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "NM_SETTING_WIRED_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-wired.h", cname = "NM_SETTING_WIRED_SPEED")]
		public const string SPEED;
		[CCode (cname = "nm_setting_wired_new", has_construct_function = false, type = "NMSetting*")]
		public SettingWired ();
		[CCode (cname = "nm_setting_wired_add_s390_option")]
		public bool add_s390_option (string key, string item);
		[CCode (cname = "nm_setting_wired_get_auto_negotiate")]
		public bool get_auto_negotiate ();
		[CCode (cname = "nm_setting_wired_get_cloned_mac_address")]
		public unowned GLib.ByteArray get_cloned_mac_address ();
		[CCode (cname = "nm_setting_wired_get_duplex")]
		public unowned string get_duplex ();
		[CCode (cname = "nm_setting_wired_get_mac_address")]
		public unowned GLib.ByteArray get_mac_address ();
		[CCode (cname = "nm_setting_wired_get_mac_address_blacklist")]
		public unowned GLib.SList<GLib.ByteArray> get_mac_address_blacklist ();
		[CCode (cname = "nm_setting_wired_get_mtu")]
		public uint32 get_mtu ();
		[CCode (cname = "nm_setting_wired_get_num_s390_options")]
		public uint32 get_num_s390_options ();
		[CCode (cname = "nm_setting_wired_get_port")]
		public unowned string get_port ();
		[CCode (cname = "nm_setting_wired_get_s390_nettype")]
		public unowned string get_s390_nettype ();
		[CCode (cname = "nm_setting_wired_get_s390_option")]
		public bool get_s390_option (uint32 idx, out string out_key, out string out_value);
		[CCode (cname = "nm_setting_wired_get_s390_option_by_key")]
		public unowned string get_s390_option_by_key (string key);
		[CCode (cname = "nm_setting_wired_get_s390_subchannels")]
		public unowned GLib.GenericArray<string> get_s390_subchannels ();
		[CCode (cname = "nm_setting_wired_get_speed")]
		public uint32 get_speed ();
		[CCode (cname = "nm_setting_wired_remove_s390_option")]
		public bool remove_s390_option (string key);
		[NoAccessorMethod]
		public bool auto_negotiate { get; set construct; }
		[NoAccessorMethod]
		public string duplex { owned get; set; }
		[NoAccessorMethod]
		public uint mtu { get; set construct; }
		[NoAccessorMethod]
		public string port { owned get; set; }
		[NoAccessorMethod]
		public string s390_nettype { owned get; set; }
		[NoAccessorMethod]
		public uint speed { get; set construct; }
	}
	[CCode (cheader_filename = "nm-setting-wireless.h", type_id = "nm_setting_wireless_get_type ()")]
	public class SettingWireless : NM.Setting {
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_BAND")]
		public const string BAND;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_BSSID")]
		public const string BSSID;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_CHANNEL")]
		public const string CHANNEL;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_CLONED_MAC_ADDRESS")]
		public const string CLONED_MAC_ADDRESS;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_HIDDEN")]
		public const string HIDDEN;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_MAC_ADDRESS")]
		public const string MAC_ADDRESS;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_MAC_ADDRESS_BLACKLIST")]
		public const string MAC_ADDRESS_BLACKLIST;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_MODE")]
		public const string MODE;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_MODE_ADHOC")]
		public const string MODE_ADHOC;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_MODE_INFRA")]
		public const string MODE_INFRA;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_MTU")]
		public const string MTU;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_RATE")]
		public const string RATE;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_SEC")]
		public const string SEC;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_SEEN_BSSIDS")]
		public const string SEEN_BSSIDS;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_SSID")]
		public const string SSID;
		[CCode (cheader_filename = "nm-setting-wireless.h", cname = "NM_SETTING_WIRELESS_TX_POWER")]
		public const string TX_POWER;
		[CCode (cname = "nm_setting_wireless_new", has_construct_function = false, type = "NMSetting*")]
		public SettingWireless ();
		[CCode (cname = "nm_setting_wireless_add_seen_bssid")]
		public bool add_seen_bssid (string bssid);
		[CCode (cname = "nm_setting_wireless_ap_security_compatible")]
		public bool ap_security_compatible (NM.SettingWirelessSecurity s_wireless_sec, NM.80211ApFlags ap_flags, NM.80211ApSecurityFlags ap_wpa, NM.80211ApSecurityFlags ap_rsn, NM.80211Mode ap_mode);
		[CCode (cname = "nm_setting_wireless_get_band")]
		public unowned string get_band ();
		[CCode (cname = "nm_setting_wireless_get_bssid")]
		public unowned GLib.ByteArray get_bssid ();
		[CCode (cname = "nm_setting_wireless_get_channel")]
		public uint32 get_channel ();
		[CCode (cname = "nm_setting_wireless_get_cloned_mac_address")]
		public unowned GLib.ByteArray get_cloned_mac_address ();
		[CCode (cname = "nm_setting_wireless_get_hidden")]
		public bool get_hidden ();
		[CCode (cname = "nm_setting_wireless_get_mac_address")]
		public unowned GLib.ByteArray get_mac_address ();
		[CCode (cname = "nm_setting_wireless_get_mac_address_blacklist")]
		public unowned GLib.SList<GLib.ByteArray> get_mac_address_blacklist ();
		[CCode (cname = "nm_setting_wireless_get_mode")]
		public unowned string get_mode ();
		[CCode (cname = "nm_setting_wireless_get_mtu")]
		public uint32 get_mtu ();
		[CCode (cname = "nm_setting_wireless_get_num_seen_bssids")]
		public uint32 get_num_seen_bssids ();
		[CCode (cname = "nm_setting_wireless_get_rate")]
		public uint32 get_rate ();
		[CCode (cname = "nm_setting_wireless_get_security")]
		public unowned string get_security ();
		[CCode (cname = "nm_setting_wireless_get_seen_bssid")]
		public unowned string get_seen_bssid (uint32 i);
		[CCode (cname = "nm_setting_wireless_get_ssid")]
		public unowned GLib.ByteArray get_ssid ();
		[CCode (cname = "nm_setting_wireless_get_tx_power")]
		public uint32 get_tx_power ();
		[NoAccessorMethod]
		public string band { owned get; set; }
		[NoAccessorMethod]
		public uint channel { get; set construct; }
		[NoAccessorMethod]
		public bool hidden { get; set; }
		[NoAccessorMethod]
		public string mode { owned get; set; }
		[NoAccessorMethod]
		public uint mtu { get; set construct; }
		[NoAccessorMethod]
		public uint rate { get; set construct; }
		[NoAccessorMethod]
		public string security { owned get; set; }
		[NoAccessorMethod]
		public uint tx_power { get; set construct; }
	}
	[CCode (cheader_filename = "nm-setting-wireless-security.h", type_id = "nm_setting_wireless_security_get_type ()")]
	public class SettingWirelessSecurity : NM.Setting {
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_AUTH_ALG")]
		public const string AUTH_ALG;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_GROUP")]
		public const string GROUP;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_KEY_MGMT")]
		public const string KEY_MGMT;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_LEAP_PASSWORD")]
		public const string LEAP_PASSWORD;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_LEAP_PASSWORD_FLAGS")]
		public const string LEAP_PASSWORD_FLAGS;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_LEAP_USERNAME")]
		public const string LEAP_USERNAME;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_PAIRWISE")]
		public const string PAIRWISE;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_PROTO")]
		public const string PROTO;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_PSK")]
		public const string PSK;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_PSK_FLAGS")]
		public const string PSK_FLAGS;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_SETTING_NAME")]
		public const string SETTING_NAME;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_WEP_KEY0")]
		public const string WEP_KEY0;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_WEP_KEY1")]
		public const string WEP_KEY1;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_WEP_KEY2")]
		public const string WEP_KEY2;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_WEP_KEY3")]
		public const string WEP_KEY3;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_WEP_KEY_FLAGS")]
		public const string WEP_KEY_FLAGS;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE")]
		public const string WEP_KEY_TYPE;
		[CCode (cheader_filename = "nm-setting-wireless-security.h", cname = "NM_SETTING_WIRELESS_SECURITY_WEP_TX_KEYIDX")]
		public const string WEP_TX_KEYIDX;
		[CCode (cname = "nm_setting_wireless_security_new", has_construct_function = false, type = "NMSetting*")]
		public SettingWirelessSecurity ();
		[CCode (cname = "nm_setting_wireless_security_add_group")]
		public bool add_group (string group);
		[CCode (cname = "nm_setting_wireless_security_add_pairwise")]
		public bool add_pairwise (string pairwise);
		[CCode (cname = "nm_setting_wireless_security_add_proto")]
		public bool add_proto (string proto);
		[CCode (cname = "nm_setting_wireless_security_clear_groups")]
		public void clear_groups ();
		[CCode (cname = "nm_setting_wireless_security_clear_pairwise")]
		public void clear_pairwise ();
		[CCode (cname = "nm_setting_wireless_security_clear_protos")]
		public void clear_protos ();
		[CCode (cname = "nm_setting_wireless_security_get_auth_alg")]
		public unowned string get_auth_alg ();
		[CCode (cname = "nm_setting_wireless_security_get_group")]
		public unowned string get_group (uint32 i);
		[CCode (cname = "nm_setting_wireless_security_get_key_mgmt")]
		public unowned string get_key_mgmt ();
		[CCode (cname = "nm_setting_wireless_security_get_leap_password")]
		public unowned string get_leap_password ();
		[CCode (cname = "nm_setting_wireless_security_get_leap_password_flags")]
		public NM.SettingSecretFlags get_leap_password_flags ();
		[CCode (cname = "nm_setting_wireless_security_get_leap_username")]
		public unowned string get_leap_username ();
		[CCode (cname = "nm_setting_wireless_security_get_num_groups")]
		public uint32 get_num_groups ();
		[CCode (cname = "nm_setting_wireless_security_get_num_pairwise")]
		public uint32 get_num_pairwise ();
		[CCode (cname = "nm_setting_wireless_security_get_num_protos")]
		public uint32 get_num_protos ();
		[CCode (cname = "nm_setting_wireless_security_get_pairwise")]
		public unowned string get_pairwise (uint32 i);
		[CCode (cname = "nm_setting_wireless_security_get_proto")]
		public unowned string get_proto (uint32 i);
		[CCode (cname = "nm_setting_wireless_security_get_psk")]
		public unowned string get_psk ();
		[CCode (cname = "nm_setting_wireless_security_get_psk_flags")]
		public NM.SettingSecretFlags get_psk_flags ();
		[CCode (cname = "nm_setting_wireless_security_get_wep_key")]
		public unowned string get_wep_key (uint32 idx);
		[CCode (cname = "nm_setting_wireless_security_get_wep_key_flags")]
		public NM.SettingSecretFlags get_wep_key_flags ();
		[CCode (cname = "nm_setting_wireless_security_get_wep_key_type")]
		public NM.WepKeyType get_wep_key_type ();
		[CCode (cname = "nm_setting_wireless_security_get_wep_tx_keyidx")]
		public uint32 get_wep_tx_keyidx ();
		[CCode (cname = "nm_setting_wireless_security_remove_group")]
		public void remove_group (uint32 i);
		[CCode (cname = "nm_setting_wireless_security_remove_pairwise")]
		public void remove_pairwise (uint32 i);
		[CCode (cname = "nm_setting_wireless_security_remove_proto")]
		public void remove_proto (uint32 i);
		[CCode (cname = "nm_setting_wireless_security_set_wep_key")]
		public void set_wep_key (uint32 idx, string key);
		[NoAccessorMethod]
		public string auth_alg { owned get; set; }
		[NoAccessorMethod]
		public string key_mgmt { owned get; set; }
		[NoAccessorMethod]
		public string leap_password { owned get; set; }
		[NoAccessorMethod]
		public uint leap_password_flags { get; set; }
		[NoAccessorMethod]
		public string leap_username { owned get; set; }
		[NoAccessorMethod]
		public string psk { owned get; set; }
		[NoAccessorMethod]
		public uint psk_flags { get; set; }
		[NoAccessorMethod]
		public string wep_key0 { owned get; set; }
		[NoAccessorMethod]
		public string wep_key1 { owned get; set; }
		[NoAccessorMethod]
		public string wep_key2 { owned get; set; }
		[NoAccessorMethod]
		public string wep_key3 { owned get; set; }
		[NoAccessorMethod]
		public uint wep_key_flags { get; set; }
		[NoAccessorMethod]
		public uint wep_key_type { get; set construct; }
		[NoAccessorMethod]
		public uint wep_tx_keyidx { get; set construct; }
	}
	[CCode (cheader_filename = "NetworkManager.h", cprefix = "NM_802_11_AP_FLAGS_")]
	[Flags]
	public enum @80211ApFlags {
		NONE,
		PRIVACY
	}
	[CCode (cheader_filename = "NetworkManager.h", cprefix = "NM_802_11_AP_SEC_")]
	[Flags]
	public enum @80211ApSecurityFlags {
		NONE,
		PAIR_WEP40,
		PAIR_WEP104,
		PAIR_TKIP,
		PAIR_CCMP,
		GROUP_WEP40,
		GROUP_WEP104,
		GROUP_TKIP,
		GROUP_CCMP,
		KEY_MGMT_PSK,
		KEY_MGMT_802_1X
	}
	[CCode (cheader_filename = "NetworkManager.h", cprefix = "NM_802_11_MODE_")]
	public enum @80211Mode {
		UNKNOWN,
		ADHOC,
		INFRA
	}
	[CCode (cheader_filename = "NetworkManager.h", cprefix = "NM_ACTIVE_CONNECTION_STATE_")]
	public enum ActiveConnectionState {
		UNKNOWN,
		ACTIVATING,
		ACTIVATED,
		DEACTIVATING
	}
	[CCode (cheader_filename = "NetworkManager.h", cprefix = "NM_BT_CAPABILITY_")]
	[Flags]
	public enum BluetoothCapabilities {
		NONE,
		DUN,
		NAP
	}
	[CCode (cheader_filename = "nm-connection.h", cprefix = "NM_CONNECTION_ERROR_")]
	public enum ConnectionError {
		[CCode (cname = "NM_CONNECTION_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_CONNECTION_ERROR_CONNECTION_SETTING_NOT_FOUND")]
		CONNECTIONSETTINGNOTFOUND,
		[CCode (cname = "NM_CONNECTION_ERROR_CONNECTION_TYPE_INVALID")]
		CONNECTIONTYPEINVALID,
		[CCode (cname = "NM_CONNECTION_ERROR_SETTING_NOT_FOUND")]
		SETTINGNOTFOUND
	}
	[CCode (cheader_filename = "NetworkManager.h", cprefix = "NM_DEVICE_CAP_")]
	[Flags]
	public enum DeviceCapabilities {
		NONE,
		NM_SUPPORTED,
		CARRIER_DETECT
	}
	[CCode (cheader_filename = "NetworkManager.h", cprefix = "NM_DEVICE_MODEM_CAPABILITY_")]
	[Flags]
	public enum DeviceModemCapabilities {
		NONE,
		POTS,
		CDMA_EVDO,
		GSM_UMTS,
		LTE
	}
	[CCode (cheader_filename = "NetworkManager.h", cprefix = "NM_DEVICE_STATE_")]
	public enum DeviceState {
		UNKNOWN,
		UNMANAGED,
		UNAVAILABLE,
		DISCONNECTED,
		PREPARE,
		CONFIG,
		NEED_AUTH,
		IP_CONFIG,
		IP_CHECK,
		SECONDARIES,
		ACTIVATED,
		DEACTIVATING,
		FAILED
	}
	[CCode (cheader_filename = "NetworkManager.h", cprefix = "NM_DEVICE_STATE_REASON_")]
	public enum DeviceStateReason {
		NONE,
		UNKNOWN,
		NOW_MANAGED,
		NOW_UNMANAGED,
		CONFIG_FAILED,
		IP_CONFIG_UNAVAILABLE,
		IP_CONFIG_EXPIRED,
		NO_SECRETS,
		SUPPLICANT_DISCONNECT,
		SUPPLICANT_CONFIG_FAILED,
		SUPPLICANT_FAILED,
		SUPPLICANT_TIMEOUT,
		PPP_START_FAILED,
		PPP_DISCONNECT,
		PPP_FAILED,
		DHCP_START_FAILED,
		DHCP_ERROR,
		DHCP_FAILED,
		SHARED_START_FAILED,
		SHARED_FAILED,
		AUTOIP_START_FAILED,
		AUTOIP_ERROR,
		AUTOIP_FAILED,
		MODEM_BUSY,
		MODEM_NO_DIAL_TONE,
		MODEM_NO_CARRIER,
		MODEM_DIAL_TIMEOUT,
		MODEM_DIAL_FAILED,
		MODEM_INIT_FAILED,
		GSM_APN_FAILED,
		GSM_REGISTRATION_NOT_SEARCHING,
		GSM_REGISTRATION_DENIED,
		GSM_REGISTRATION_TIMEOUT,
		GSM_REGISTRATION_FAILED,
		GSM_PIN_CHECK_FAILED,
		FIRMWARE_MISSING,
		REMOVED,
		SLEEPING,
		CONNECTION_REMOVED,
		USER_REQUESTED,
		CARRIER,
		CONNECTION_ASSUMED,
		SUPPLICANT_AVAILABLE,
		MODEM_NOT_FOUND,
		BT_FAILED,
		GSM_SIM_NOT_INSERTED,
		GSM_SIM_PIN_REQUIRED,
		GSM_SIM_PUK_REQUIRED,
		GSM_SIM_WRONG,
		INFINIBAND_MODE,
		DEPENDENCY_FAILED,
		BR2684_FAILED,
		LAST
	}
	[CCode (cheader_filename = "NetworkManager.h", cprefix = "NM_DEVICE_TYPE_")]
	public enum DeviceType {
		UNKNOWN,
		ETHERNET,
		WIFI,
		UNUSED1,
		UNUSED2,
		BT,
		OLPC_MESH,
		WIMAX,
		MODEM,
		INFINIBAND,
		BOND,
		VLAN,
		ADSL
	}
	[CCode (cheader_filename = "NetworkManager.h", cprefix = "NM_WIFI_DEVICE_CAP_")]
	[Flags]
	public enum DeviceWifiCapabilities {
		NONE,
		CIPHER_WEP40,
		CIPHER_WEP104,
		CIPHER_TKIP,
		CIPHER_CCMP,
		WPA,
		RSN,
		AP
	}
	[CCode (cheader_filename = "nm-setting-8021x.h", cprefix = "NM_SETTING_802_1X_CK_FORMAT_")]
	public enum Setting8021xCKFormat {
		UNKNOWN,
		X509,
		RAW_KEY,
		PKCS12
	}
	[CCode (cheader_filename = "nm-setting-8021x.h", cprefix = "NM_SETTING_802_1X_CK_SCHEME_")]
	public enum Setting8021xCKScheme {
		UNKNOWN,
		BLOB,
		PATH
	}
	[CCode (cheader_filename = "nm-setting-8021x.h", cprefix = "NM_SETTING_802_1X_ERROR_")]
	public enum Setting8021xError {
		[CCode (cname = "NM_SETTING_802_1X_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_802_1X_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_802_1X_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY
	}
	[CCode (cheader_filename = "nm-setting-adsl.h", cprefix = "NM_SETTING_ADSL_ERROR_")]
	public enum SettingAdslError {
		[CCode (cname = "NM_SETTING_ADSL_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_ADSL_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_ADSL_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY
	}
	[CCode (cheader_filename = "nm-setting-bluetooth.h", cprefix = "NM_SETTING_BLUETOOTH_ERROR_")]
	public enum SettingBluetoothError {
		[CCode (cname = "NM_SETTING_BLUETOOTH_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_BLUETOOTH_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_BLUETOOTH_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY,
		[CCode (cname = "NM_SETTING_BLUETOOTH_ERROR_TYPE_SETTING_NOT_FOUND")]
		TYPESETTINGNOTFOUND
	}
	[CCode (cheader_filename = "nm-setting-bond.h", cprefix = "NM_SETTING_BOND_ERROR_")]
	public enum SettingBondError {
		[CCode (cname = "NM_SETTING_BOND_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_BOND_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_BOND_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY,
		[CCode (cname = "NM_SETTING_BOND_ERROR_INVALID_OPTION")]
		INVALIDOPTION,
		[CCode (cname = "NM_SETTING_BOND_ERROR_MISSING_OPTION")]
		MISSINGOPTION
	}
	[CCode (cheader_filename = "nm-setting-cdma.h", cprefix = "NM_SETTING_CDMA_ERROR_")]
	public enum SettingCdmaError {
		[CCode (cname = "NM_SETTING_CDMA_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_CDMA_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_CDMA_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY,
		[CCode (cname = "NM_SETTING_CDMA_ERROR_MISSING_SERIAL_SETTING")]
		MISSINGSERIALSETTING
	}
	[CCode (cheader_filename = "nm-setting.h", cprefix = "NM_SETTING_COMPARE_FLAG_")]
	public enum SettingCompareFlags {
		EXACT,
		FUZZY,
		IGNORE_ID,
		IGNORE_SECRETS,
		IGNORE_AGENT_OWNED_SECRETS,
		IGNORE_NOT_SAVED_SECRETS
	}
	[CCode (cheader_filename = "nm-setting-connection.h", cprefix = "NM_SETTING_CONNECTION_ERROR_")]
	public enum SettingConnectionError {
		[CCode (cname = "NM_SETTING_CONNECTION_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_CONNECTION_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_CONNECTION_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY,
		[CCode (cname = "NM_SETTING_CONNECTION_ERROR_TYPE_SETTING_NOT_FOUND")]
		TYPESETTINGNOTFOUND,
		[CCode (cname = "NM_SETTING_CONNECTION_ERROR_IP_CONFIG_NOT_ALLOWED")]
		IPCONFIGNOTALLOWED
	}
	[CCode (cheader_filename = "nm-setting.h", cprefix = "NM_SETTING_DIFF_RESULT_")]
	public enum SettingDiffResult {
		UNKNOWN,
		IN_A,
		IN_B
	}
	[CCode (cheader_filename = "nm-setting.h", cprefix = "NM_SETTING_ERROR_")]
	public enum SettingError {
		[CCode (cname = "NM_SETTING_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_ERROR_PROPERTY_NOT_FOUND")]
		PROPERTYNOTFOUND,
		[CCode (cname = "NM_SETTING_ERROR_PROPERTY_NOT_SECRET")]
		PROPERTYNOTSECRET,
		[CCode (cname = "NM_SETTING_ERROR_PROPERTY_TYPE_MISMATCH")]
		PROPERTYTYPEMISMATCH
	}
	[CCode (cheader_filename = "nm-setting-gsm.h", cprefix = "NM_SETTING_GSM_ERROR_")]
	public enum SettingGsmError {
		[CCode (cname = "NM_SETTING_GSM_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_GSM_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_GSM_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY,
		[CCode (cname = "NM_SETTING_GSM_ERROR_MISSING_SERIAL_SETTING")]
		MISSINGSERIALSETTING
	}
	[CCode (cheader_filename = "nm-setting-gsm.h", cprefix = "NM_SETTING_GSM_BAND_")]
	public enum SettingGsmNetworkBand {
		UNKNOWN,
		ANY,
		EGSM,
		DCS,
		PCS,
		G850,
		U2100,
		U1800,
		U17IV,
		U800,
		U850,
		U900,
		U17IX,
		U1900,
		U2600
	}
	[CCode (cheader_filename = "nm-setting-gsm.h", cprefix = "NM_SETTING_GSM_NETWORK_TYPE_")]
	public enum SettingGsmNetworkType {
		ANY,
		UMTS_HSPA,
		GPRS_EDGE,
		PREFER_UMTS_HSPA,
		PREFER_GPRS_EDGE
	}
	[CCode (cheader_filename = "nm-setting.h", cprefix = "NM_SETTING_HASH_FLAG_")]
	public enum SettingHashFlags {
		ALL,
		NO_SECRETS,
		ONLY_SECRETS
	}
	[CCode (cheader_filename = "nm-setting-ip4-config.h", cprefix = "NM_SETTING_IP4_CONFIG_ERROR_")]
	public enum SettingIP4ConfigError {
		[CCode (cname = "NM_SETTING_IP4_CONFIG_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_IP4_CONFIG_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_IP4_CONFIG_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY,
		[CCode (cname = "NM_SETTING_IP4_CONFIG_ERROR_NOT_ALLOWED_FOR_METHOD")]
		NOTALLOWEDFORMETHOD
	}
	[CCode (cheader_filename = "nm-setting-ip6-config.h", cprefix = "NM_SETTING_IP6_CONFIG_ERROR_")]
	public enum SettingIP6ConfigError {
		[CCode (cname = "NM_SETTING_IP6_CONFIG_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_IP6_CONFIG_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_IP6_CONFIG_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY,
		[CCode (cname = "NM_SETTING_IP6_CONFIG_ERROR_NOT_ALLOWED_FOR_METHOD")]
		NOTALLOWEDFORMETHOD
	}
	[CCode (cheader_filename = "nm-setting-ip6-config.h", cprefix = "NM_SETTING_IP6_CONFIG_PRIVACY_")]
	public enum SettingIP6ConfigPrivacy {
		UNKNOWN,
		DISABLED,
		PREFER_PUBLIC_ADDR,
		PREFER_TEMP_ADDR
	}
	[CCode (cheader_filename = "nm-setting-infiniband.h", cprefix = "NM_SETTING_INFINIBAND_ERROR_")]
	public enum SettingInfinibandError {
		[CCode (cname = "NM_SETTING_INFINIBAND_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_INFINIBAND_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_INFINIBAND_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY
	}
	[CCode (cheader_filename = "nm-setting-olpc-mesh.h", cprefix = "NM_SETTING_OLPC_MESH_ERROR_")]
	public enum SettingOlpcMeshError {
		[CCode (cname = "NM_SETTING_OLPC_MESH_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_OLPC_MESH_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_OLPC_MESH_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY
	}
	[CCode (cheader_filename = "nm-setting-ppp.h", cprefix = "NM_SETTING_PPP_ERROR_")]
	public enum SettingPPPError {
		[CCode (cname = "NM_SETTING_PPP_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_PPP_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_PPP_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY,
		[CCode (cname = "NM_SETTING_PPP_ERROR_REQUIRE_MPPE_NOT_ALLOWED")]
		REQUIREMPPENOTALLOWED
	}
	[CCode (cheader_filename = "nm-setting-pppoe.h", cprefix = "NM_SETTING_PPPOE_ERROR_")]
	public enum SettingPPPOEError {
		[CCode (cname = "NM_SETTING_PPPOE_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_PPPOE_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_PPPOE_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY,
		[CCode (cname = "NM_SETTING_PPPOE_ERROR_MISSING_PPP_SETTING")]
		MISSINGPPPSETTING
	}
	[CCode (cheader_filename = "nm-setting.h", cprefix = "NM_SETTING_SECRET_FLAG_")]
	public enum SettingSecretFlags {
		NONE,
		AGENT_OWNED,
		NOT_SAVED,
		NOT_REQUIRED
	}
	[CCode (cheader_filename = "nm-setting-serial.h", cprefix = "NM_SETTING_SERIAL_ERROR_")]
	public enum SettingSerialError {
		[CCode (cname = "NM_SETTING_SERIAL_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_SERIAL_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_SERIAL_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY,
		[CCode (cname = "NM_SETTING_SERIAL_ERROR_MISSING_PPP_SETTING")]
		MISSINGPPPSETTING
	}
	[CCode (cheader_filename = "nm-setting-vlan.h", cprefix = "NM_SETTING_VLAN_ERROR_")]
	public enum SettingVlanError {
		UNKNOWN,
		[CCode (cname = "NM_SETTING_VLAN_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_VLAN_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY
	}
	[CCode (cheader_filename = "nm-setting-vpn.h", cprefix = "NM_SETTING_VPN_ERROR_")]
	public enum SettingVpnError {
		[CCode (cname = "NM_SETTING_VPN_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_VPN_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_VPN_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY
	}
	[CCode (cheader_filename = "nm-setting-wimax.h", cprefix = "NM_SETTING_WIMAX_ERROR_")]
	public enum SettingWimaxError {
		[CCode (cname = "NM_SETTING_WIMAX_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_WIMAX_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_WIMAX_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY
	}
	[CCode (cheader_filename = "nm-setting-wired.h", cprefix = "NM_SETTING_WIRED_ERROR_")]
	public enum SettingWiredError {
		[CCode (cname = "NM_SETTING_WIRED_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_WIRED_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_WIRED_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY
	}
	[CCode (cheader_filename = "nm-setting-wireless.h", cprefix = "NM_SETTING_WIRELESS_ERROR_")]
	public enum SettingWirelessError {
		[CCode (cname = "NM_SETTING_WIRELESS_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_WIRELESS_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_WIRELESS_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY,
		[CCode (cname = "NM_SETTING_WIRELESS_ERROR_MISSING_SECURITY_SETTING")]
		MISSINGSECURITYSETTING,
		[CCode (cname = "NM_SETTING_WIRELESS_ERROR_CHANNEL_REQUIRES_BAND")]
		CHANNELREQUIRESBAND
	}
	[CCode (cheader_filename = "nm-setting-wireless-security.h", cprefix = "NM_SETTING_WIRELESS_SECURITY_ERROR_")]
	public enum SettingWirelessSecurityError {
		[CCode (cname = "NM_SETTING_WIRELESS_SECURITY_ERROR_UNKNOWN")]
		UNKNOWNERROR,
		[CCode (cname = "NM_SETTING_WIRELESS_SECURITY_ERROR_INVALID_PROPERTY")]
		INVALIDPROPERTY,
		[CCode (cname = "NM_SETTING_WIRELESS_SECURITY_ERROR_MISSING_PROPERTY")]
		MISSINGPROPERTY,
		[CCode (cname = "NM_SETTING_WIRELESS_SECURITY_ERROR_MISSING_802_1X_SETTING")]
		MISSING8021XSETTING,
		[CCode (cname = "NM_SETTING_WIRELESS_SECURITY_ERROR_LEAP_REQUIRES_802_1X")]
		LEAPREQUIRES8021X,
		[CCode (cname = "NM_SETTING_WIRELESS_SECURITY_ERROR_LEAP_REQUIRES_USERNAME")]
		LEAPREQUIRESUSERNAME,
		[CCode (cname = "NM_SETTING_WIRELESS_SECURITY_ERROR_SHARED_KEY_REQUIRES_WEP")]
		SHAREDKEYREQUIRESWEP
	}
	[CCode (cheader_filename = "NetworkManager.h", cprefix = "NM_STATE_")]
	public enum State {
		UNKNOWN,
		ASLEEP,
		DISCONNECTED,
		DISCONNECTING,
		CONNECTING,
		CONNECTED_LOCAL,
		CONNECTED_SITE,
		CONNECTED_GLOBAL
	}
	[CCode (cheader_filename = "nm-setting-vlan.h", cprefix = "NM_VLAN_FLAG_")]
	public enum VlanFlags {
		REORDER_HEADERS,
		GVRP,
		LOOSE_BINDING
	}
	[CCode (cheader_filename = "nm-setting-vlan.h", cprefix = "NM_VLAN_")]
	public enum VlanPriorityMap {
		INGRESS_MAP,
		EGRESS_MAP
	}
	[CCode (cheader_filename = "nm-setting-wireless-security.h", cprefix = "NM_WEP_KEY_TYPE_")]
	public enum WepKeyType {
		UNKNOWN,
		KEY,
		PASSPHRASE,
		LAST
	}
	[CCode (cheader_filename = "nm-setting.h", instance_pos = 3.9)]
	public delegate bool SettingClearSecretsWithFlagsFn (NM.Setting setting, string secret, NM.SettingSecretFlags flags);
	[CCode (cheader_filename = "nm-setting.h", instance_pos = 4.9)]
	public delegate void SettingValueIterFn (NM.Setting setting, string key, GLib.Value value, GLib.ParamFlags flags);
	[CCode (cheader_filename = "nm-setting-vpn.h", instance_pos = 2.9)]
	public delegate void VPNIterFunc (string key, string value);
	[CCode (cheader_filename = "nm-connection.h", cname = "NM_CONNECTION_PATH")]
	public const string CONNECTION_PATH;
	[CCode (cheader_filename = "nm-setting.h", cname = "NM_SETTING_NAME")]
	public const string SETTING_NAME;
}
